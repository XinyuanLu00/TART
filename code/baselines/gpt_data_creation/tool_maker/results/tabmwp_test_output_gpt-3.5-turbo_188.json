[
  {
    "id": "8",
    "question": "Hannah baked cookies each day for a bake sale. How many more cookies did Hannah bake on Saturday than on Sunday?",
    "answer": "18",
    "table_formatter_output": "table_data = [['Day', 'Number of cookies'], ['Friday', 163], ['Saturday', 281], ['Sunday', 263]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    column_name = 'Number of cookies'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_saturday = get_row_index_by_value(table_data, 'Saturday')\n    index_sunday = get_row_index_by_value(table_data, 'Sunday')\n    cookies_saturday = get_column_cell_value(index_saturday, column_1)\n    cookies_sunday = get_column_cell_value(index_sunday, column_1)\n    difference = cookies_saturday - cookies_sunday\n    return difference\n\nprint(solution(table_data)) # Output: 18"
  },
  {
    "id": "16",
    "question": "Some friends discussed the sizes of their coin collections. What is the mean of the numbers?",
    "answer": "84",
    "table_formatter_output": "table_data = [['Name', 'Number of coins'], ['Braden', 76], ['Camilla', 94], ['Rick', 86], ['Mary', 84], ['Hector', 80], ['Devin', 83], ['Emily', 82], ['Avery', 87]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef solution(table_data):\n    column_name = 'Number of coins'\n    column_1 = get_column_by_name(table_data, column_name)\n    total = sum_column(column_1)\n    count = len(column_1) - 1\n    answer = divide(total, count)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "22",
    "question": "The employees at Tessa's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 40 cracked window panes but less than 60 cracked window panes?",
    "answer": "9",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [3, [1]], [4, [0, 0, 1, 5]], [5, [0, 2, 5, 9, 9]], [6, []], [7, [0]], [8, [6]], [9, [0]]]",
    "tool_maker_output": "def get_leaves_by_stem(table, stem):\n    for row in table:\n        if row[0] == stem:\n            return row[1]\n\ndef count_shipments(table_data):\n    leaves_4 = get_leaves_by_stem(table_data, 4)\n    leaves_5 = get_leaves_by_stem(table_data, 5)\n    total_leaves = leaves_4 + leaves_5\n    count = 0\n    for leaf in total_leaves:\n        if leaf >= 40 and leaf < 60:\n            count += 1\n    return count\n\nsolution(table_data)"
  },
  {
    "id": "23",
    "question": "Samir's class recorded how many cans of food each student collected for their canned food drive. What is the median of the numbers?",
    "answer": "7",
    "table_formatter_output": "table_data = [['Name', 'Number of cans of food'], ['Samir', 7], ['Kristen', 4], ['Dakota', 7], ['Jamie', 8], ['Maggie', 9]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_median(column):\n    column = column[1:]\n    column.sort()\n    n = len(column)\n    if n % 2 == 0:\n        median = (column[n//2 - 1] + column[n//2]) / 2\n    else:\n        median = column[n//2]\n    return median\n\ndef solution(table_data):\n    column_name = 'Number of cans of food'\n    column_1 = get_column_by_name(table_data, column_name)\n    median = find_median(column_1)\n    return median\nprint(solution(table_data)) # Output: 7"
  },
  {
    "id": "25",
    "question": "Some friends discussed the sizes of their coin collections. Who has the most coins?",
    "answer": "Hunter",
    "table_formatter_output": "table_data = [['Name', 'Number of coins'], ['Erica', 646], ['Hunter', 663], ['Damon', 643], ['Larry', 634]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_max_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    max_value = max(column)\n    return column.index(max_value) + 1 if with_header else column.index(max_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of coins'\n    column_1 = get_column_by_name(table_data, column_name)\n    max_index = find_max_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Name')\n    answer = get_column_cell_value(max_index, column_2)\n    return answer"
  },
  {
    "id": "30",
    "question": "Some friends played a trivia game and recorded their scores. How many more points did Hannah score than Dustin?",
    "answer": "650",
    "table_formatter_output": "table_data = [['Name', 'Score'], ['Hannah', 770], ['Mona', 570], ['Bryan', 886], ['Carly', 223], ['Dustin', 120]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    hannah_score = get_column_cell_value(get_row_index_by_value(table_data, 'Hannah'), get_column_by_name(table_data, 'Score'))\n    dustin_score = get_column_cell_value(get_row_index_by_value(table_data, 'Dustin'), get_column_by_name(table_data, 'Score'))\n    difference = hannah_score - dustin_score\n    return difference\n\nprint(solution(table_data)) # Output: 650"
  },
  {
    "id": "31",
    "question": "How much money does Sidney need to buy a piece of mint chocolate and 7 peanut butter cups?",
    "answer": "1.47",
    "table_formatter_output": "table_data = [['peanut butter cup', 0.19], ['gummy bear', 0.10], ['piece of mint chocolate', 0.14], ['piece of licorice', 0.19], ['piece of gum', 0.13]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef multiply(a, b):\n    return a * b\n\ndef sum_values(a, b):\n    return a + b\n\ndef solution(table_data):\n    peanut_butter_cup_price = get_column_cell_value(0, table_data)\n    mint_chocolate_price = get_column_cell_value(2, table_data)\n\n    peanut_butter_cup_total = multiply(peanut_butter_cup_price, 7)\n    total_cost = sum_values(mint_chocolate_price, peanut_butter_cup_total)\n\n    return total_cost\n\nprint(solution(table_data))"
  },
  {
    "id": "46",
    "question": "Some friends compared the sizes of their stuffed animal collections. What is the mode of the numbers?",
    "answer": "16",
    "table_formatter_output": "table_data = [['Name', 'Number of stuffed animals'], ['Evelyn', 16], ['Clarence', 19], ['Hazel', 16], ['Janet', 16], ['Pam', 19]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Number of stuffed animals'\n    column_1 = get_column_by_name(table_data, column_name)\n    mode = find_mode(column_1)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "53",
    "question": "Paula's family went on a road trip and counted the number of cars they saw each day. How many cars in total did they see on Friday and Saturday?",
    "answer": "323",
    "table_formatter_output": "table_data = [['Day', 'Number of cars'], ['Thursday', 158], ['Friday', 159], ['Saturday', 164]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(value1, value2):\n    return value1 + value2\n\ndef solution(table_data):\n    column_name = 'Number of cars'\n    column_1 = get_column_by_name(table_data, column_name)\n    friday_index = table_data[1].index(159)\n    saturday_index = table_data[2].index(164)\n    friday_value = get_column_cell_value(friday_index, column_1)\n    saturday_value = get_column_cell_value(saturday_index, column_1)\n    answer = sum_values(friday_value, saturday_value)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "54",
    "question": "Look at the table. Then answer the question. At a price of $155, is there a shortage or a surplus?",
    "answer": "shortage",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$155', 22600, 5800], ['$275', 20500, 9400], ['$395', 18400, 13000], ['$515', 16300, 16600], ['$635', 14200, 20200]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    price_index = get_row_index_by_value(table_data, '$155')\n    quantity_demanded_column = get_column_by_name(table_data, 'Quantity demanded')\n    quantity_supplied_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    quantity_demanded = get_column_cell_value(price_index, quantity_demanded_column)\n    quantity_supplied = get_column_cell_value(price_index, quantity_supplied_column)\n    \n    if quantity_demanded > quantity_supplied:\n        return 'shortage'\n    else:\n        return 'surplus'"
  },
  {
    "id": "56",
    "question": "Look at the following schedule. When does the snowboarding event begin?",
    "answer": "7:25 P.M.",
    "table_formatter_output": "table_data = [['Event', 'Begin', 'End'], ['speed skating', '11:20 A.M.', '4:55 P.M.'], ['cross-country skiing', '4:35 P.M.', '6:35 P.M.'], ['downhill skiing', '5:40 P.M.', '6:50 P.M.'], ['luge', '6:05 P.M.', '8:15 P.M.'], ['snowboarding', '7:25 P.M.', '9:30 P.M.']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    event_name = 'snowboarding'\n    begin_column = get_column_by_name(table_data, 'Begin')\n    event_index = get_row_index_by_value(table_data, event_name)\n    answer = get_column_cell_value(event_index, begin_column)\n    return answer\nprint(solution(table_data))"
  },
  {
    "id": "62",
    "question": "How much money does Leon need to buy a book about South America, a book about cats, and a book about Australia?",
    "answer": "19",
    "table_formatter_output": "table_data = [['book about outer space', 7], ['book about cars', 1], ['book about cats', 9], ['book about Australia', 9], ['book about South America', 1]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_values(values):\n    return sum(values)\n\ndef solution(table_data):\n    books = ['book about South America', 'book about cats', 'book about Australia']\n    column_1 = get_column_by_name(table_data, '$')\n    total_cost = sum_values([get_column_cell_value(get_row_index_by_value(table_data, book), column_1) for book in books])\n    return total_cost\nprint(solution(table_data)) # Output: 19"
  },
  {
    "id": "71",
    "question": "A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. In 1996, how many more medals did Sweden win than Finland?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Country', '1996', '2000'], ['Sweden', 8, 12], ['Brazil', 15, 12], ['Finland', 4, 4]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef subtract(a, b):\n    return a - b\n\ndef solution(table_data):\n    column_name = '1996'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_sweden = get_row_index_by_value(table_data, 'Sweden')\n    index_finland = get_row_index_by_value(table_data, 'Finland')\n    sweden_medals = get_column_cell_value(index_sweden, column_1)\n    finland_medals = get_column_cell_value(index_finland, column_1)\n    answer = subtract(sweden_medals, finland_medals)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "74",
    "question": "How much money does Sarah need to buy an elastic band and a brass clip?",
    "answer": "0.58",
    "table_formatter_output": "table_data = [['small metal hook', 0.30], ['elastic band', 0.20], ['light bulb', 0.45], ['spool of gold wire', 0.56], ['brass clip', 0.38]]",
    "tool_maker_output": "def get_row_by_name(table, row_name):\n    for row in table:\n        if row[0] == row_name:\n            return row\n\ndef get_row_cell_value(row, cell_index):\n    return row[cell_index]\n\ndef add_values(value1, value2):\n    return value1 + value2\n\ndef solution(table_data):\n    elastic_band_row = get_row_by_name(table_data, 'elastic band')\n    brass_clip_row = get_row_by_name(table_data, 'brass clip')\n    \n    elastic_band_price = get_row_cell_value(elastic_band_row, 1)\n    brass_clip_price = get_row_cell_value(brass_clip_row, 1)\n    \n    answer = add_values(elastic_band_price, brass_clip_price)\n    return answer"
  },
  {
    "id": "82",
    "question": "A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Wednesday and Thursday?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Day', 'Food preparation time (minutes)'], ['Monday', 25], ['Tuesday', 27], ['Wednesday', 18], ['Thursday', 21], ['Friday', 27]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef calculate_rate_of_change(table_data, day1, day2):\n    column_name = 'Food preparation time (minutes)'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, day1)\n    index_2 = get_row_index_by_value(table_data, day2)\n    value1 = get_column_cell_value(index_1, column_1)\n    value2 = get_column_cell_value(index_2, column_1)\n    change_in_value = value2 - value1\n    change_in_time = 1  # Assuming 1 day difference between the two days\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, 'Wednesday', 'Thursday')\n    return rate_of_change"
  },
  {
    "id": "84",
    "question": "A real estate agent evaluated the number of houses sold this year in each town in Clinton County. What fraction of houses sold in Clinton County were in Hillsdale? Simplify your answer.",
    "answer": "92/333",
    "table_formatter_output": "table_data = [['Town', 'Number of houses sold'], ['Livingston', 900], ['Lexington', 730], ['Hillsdale', 920], ['Vindale', 170], ['Other', 610]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef solution(table_data):\n    column_name = 'Number of houses sold'\n    column_1 = get_column_by_name(table_data, column_name)\n    total = sum_column(column_1)\n    index_1 = get_row_index_by_value(table_data, 'Hillsdale')\n    hillsdale = get_column_cell_value(index_1, column_1)\n    answer = divide(hillsdale, total)\n    return answer"
  },
  {
    "id": "85",
    "question": "Look at the following schedule. Gina just missed the 10.45 A.M. bus at downtown. How long does she have to wait until the next bus?",
    "answer": "15 minutes",
    "table_formatter_output": "table_data = [['downtown', '10:30 A.M.', '10:45 A.M.', '11:00 A.M.'], ['hotel', '11:15 A.M.', '11:30 A.M.', '11:45 A.M.'], ['softball field', '12:15 P.M.', '12:30 P.M.', '12:45 P.M.'], ['train station', '1:00 P.M.', '1:15 P.M.', '1:30 P.M.']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_time_difference(start_time, end_time):\n    start_hour, start_minute = start_time.split(':')\n    end_hour, end_minute = end_time.split(':')\n    start_hour = int(start_hour[:-1]) if start_hour.endswith('P') else int(start_hour)\n    end_hour = int(end_hour[:-1]) if end_hour.endswith('P') else int(end_hour)\n    start_minute = int(start_minute[:-5])\n    end_minute = int(end_minute[:-5])\n    total_start_minutes = start_hour * 60 + start_minute\n    total_end_minutes = end_hour * 60 + end_minute\n    return total_end_minutes - total_start_minutes\n\ndef solution(table_data):\n    start_time = '10:45 A.M.'\n    row = get_row_by_value(table_data, start_time)\n    index = row.index(start_time)\n    next_bus_time = row[index + 1]\n    wait_time = get_time_difference(start_time, next_bus_time)\n    return wait_time\n\nprint(solution(table_data))"
  },
  {
    "id": "102",
    "question": "Lorenzo has $13.50. Does he have enough to buy a toy guitar and a set of juggling balls?",
    "answer": "yes",
    "table_formatter_output": "table_data = [['toy boat', '$5.54'], ['toy guitar', '$8.23'], ['set of juggling balls', '$5.01'], ['trivia game', '$8.18'], ['jigsaw puzzle', '$5.30'], ['toy dinosaur', '$3.00']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_prices(price_1, price_2):\n    return float(price_1[1:]) + float(price_2[1:])\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    toy_guitar_index = table_data.index(['toy guitar', '$8.23'])\n    set_of_juggling_balls_index = table_data.index(['set of juggling balls', '$5.01'])\n    total_price = sum_prices(get_column_cell_value(toy_guitar_index, price_column), get_column_cell_value(set_of_juggling_balls_index, price_column))\n    return 'yes' if total_price <= 13.50 else 'no'"
  },
  {
    "id": "106",
    "question": "Dean counted the number of pieces of pepperoni on each pizza he made. What is the largest number of pieces of pepperoni?",
    "answer": "48",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [1, [7, 7, 9]], [2, [5, 5, 6, 7]], [3, [0, 0, 8, 8]], [4, [0, 5, 5, 6, 8, 8]]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_max_value(table):\n    max_value = 0\n    for row in table[1:]:\n        for leaf in row[1]:\n            if leaf > max_value:\n                max_value = leaf\n    return max_value\n\ndef solution(table_data):\n    max_value = find_max_value(table_data)\n    return max_value\n\nprint(solution(table_data)) # Output: 48"
  },
  {
    "id": "112",
    "question": "A jeweler in Middletown examined which metals her customers selected for wedding bands last year. What fraction of the rings sold had a gold band? Simplify your answer.",
    "answer": "77/200",
    "table_formatter_output": "table_data = [['Metal', 'Rings bought'], ['Platinum', 500], ['Silver', 730], ['Gold', 770]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef simplify_fraction(numerator, denominator):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_divisor = gcd(numerator, denominator)\n    return numerator // common_divisor, denominator // common_divisor\n\ndef solution(table_data):\n    column_name = 'Rings bought'\n    column_1 = get_column_by_name(table_data, column_name)\n    total = sum_column(column_1)\n    index_1 = get_row_index_by_value(table_data, 'Gold')\n    gold_rings = get_column_cell_value(index_1, column_1)\n    fraction = divide(gold_rings, total)\n    simplified_fraction = simplify_fraction(gold_rings, total)\n    return simplified_fraction"
  },
  {
    "id": "123",
    "question": "Erik has $7,616.00. How much money will Erik have left if he buys a parrot and a kinkajou?",
    "answer": "4,656",
    "table_formatter_output": "table_data = [['alpaca', '$1,605.00'], ['kinkajou', '$1,837.00'], ['python', '$8,343.00'], ['parrot', '$1,123.00'], ['macaw', '$1,629.00']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(values):\n    total = 0\n    for value in values:\n        total += float(value.replace('$', '').replace(',', ''))\n    return total\n\ndef subtract_values(value1, value2):\n    return value1 - value2\n\ndef solution(table_data):\n    animals = ['parrot', 'kinkajou']\n    column_1 = get_column_by_name(table_data, 'alpaca')\n    column_2 = get_column_by_name(table_data, 'kinkajou')\n    total_cost = sum_values([get_column_cell_value(animals.index(animal), column_1) for animal in animals])\n    starting_amount = 7616.00\n    remaining_amount = subtract_values(starting_amount, total_cost)\n    return remaining_amount\n\nprint(solution(table_data))"
  },
  {
    "id": "126",
    "question": "Gina kept track of how many laps she swam during the past 7 days. What is the range of the numbers?",
    "answer": "10",
    "table_formatter_output": "table_data = [['Day', 'Number of laps'], ['Friday', 41], ['Saturday', 38], ['Sunday', 35], ['Monday', 41], ['Tuesday', 35], ['Wednesday', 31], ['Thursday', 38]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of laps'\n    column_1 = get_column_by_name(table_data, column_name)\n    answer = find_range(column_1)\n    return answer\nprint(solution(table_data)) # Output: 10"
  },
  {
    "id": "128",
    "question": "An amusement park manager looked up the number of ride tickets sold in the past 4 days. On which day did the amusement park sell the most tickets?",
    "answer": "Friday",
    "table_formatter_output": "table_data = [['Day', 'Number of tickets'], ['Tuesday', 491], ['Wednesday', 459], ['Thursday', 445], ['Friday', 495]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_max_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    max_value = max(column)\n    return column.index(max_value) + 1 if with_header else column.index(max_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of tickets'\n    column_1 = get_column_by_name(table_data, column_name)\n    max_index = find_max_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Day')\n    answer = get_column_cell_value(max_index, column_2)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "133",
    "question": "This is Franco's complete financial record for September. At the end of September, how much money did Franco have?",
    "answer": "50.80",
    "table_formatter_output": "table_data = [['Date', 'Description', 'Received', 'Expenses', 'Available Funds'],\n              ['', 'Balance: end of August', '', '', '$29.20'],\n              ['9/2', 'sandpaper', '', '$2.45', '$26.75'],\n              ['9/3', 'paintbrush', '', '$5.95', '$20.80'],\n              ['9/5', 'painting fence', '$30.00', '', '$50.80']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    column_name = 'Available Funds'\n    column_1 = get_column_by_name(table_data, column_name)\n    answer = get_column_cell_value(-1, column_1)\n    return answer\nprint(solution(table_data)) # Output: 50.80"
  },
  {
    "id": "141",
    "question": "The school district compared how many swings each elementary school has. What is the mode of the numbers?",
    "answer": "10",
    "table_formatter_output": "table_data = [['School', 'Number of swings'], ['Jefferson Elementary', 10], ['Roseville Elementary', 10], ['Canyon Elementary', 5], ['Hillside Elementary', 10], ['Boyd Elementary', 9], ['Newberry Elementary', 9], ['Valley Elementary', 5], ['Lincoln Elementary', 10]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Number of swings'\n    column = get_column_by_name(table_data, column_name)\n    mode = find_mode(column)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "145",
    "question": "A real estate agent looked into how many houses were sold in different cities. What is the median of the numbers?",
    "answer": "22",
    "table_formatter_output": "table_data = [['City', 'Number of houses sold'], ['Center City', 41], ['Fremont', 21], ['Pennytown', 23], ['Liberty City', 14], ['New Hamburg', 22]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_median(column):\n    column = column[1:]\n    column.sort()\n    n = len(column)\n    if n % 2 == 0:\n        median = (column[n//2 - 1] + column[n//2]) / 2\n    else:\n        median = column[n//2]\n    return median\n\ndef solution(table_data):\n    column_name = 'Number of houses sold'\n    column_1 = get_column_by_name(table_data, column_name)\n    median = find_median(column_1)\n    return median\n\ntable_data = [['City', 'Number of houses sold'], ['Center City', 41], ['Fremont', 21], ['Pennytown', 23], ['Liberty City', 14], ['New Hamburg', 22]]\nprint(solution(table_data))"
  },
  {
    "id": "163",
    "question": "How much would it cost to buy 3+2/5 kilograms of marinara sauce?",
    "answer": "6.80",
    "table_formatter_output": "table_data = [['alfredo sauce', '$2/kg'], ['tomato sauce', '$2/kg'], ['beef sauce', '$3/kg'], ['chicken sauce', '$2/kg'], ['marinara sauce', '$2/kg']]",
    "tool_maker_output": "def get_price_per_kg(table, item):\n    for row in table:\n        if row[0] == item:\n            price = float(row[1].strip('$').strip('/kg'))\n            return price\n\ndef calculate_cost(item, weight):\n    price_per_kg = get_price_per_kg(table_data, item)\n    total_cost = price_per_kg * weight\n    return total_cost\n\ndef solution(table_data):\n    weight = 3 + 2/5\n    item = 'marinara sauce'\n    answer = calculate_cost(item, weight)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "169",
    "question": "Several students participated in a race. What is the median of the numbers?",
    "answer": "19",
    "table_formatter_output": "table_data = [['Runner', 'Time (minutes)'], ['Jeremiah', 19], ['Cora', 20], ['Wyatt', 18], ['Kira', 17], ['Zack', 19]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_median(column):\n    column = column[1:]\n    column.sort()\n    n = len(column)\n    if n % 2 == 0:\n        median1 = column[n//2]\n        median2 = column[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = column[n//2]\n    return median\n\ndef solution(table_data):\n    column_name = 'Time (minutes)'\n    column_1 = get_column_by_name(table_data, column_name)\n    median = find_median(column_1)\n    return median"
  },
  {
    "id": "175",
    "question": "Eliana bought 2.8 pounds of oysters. How much did she spend?",
    "answer": "8.40",
    "table_formatter_output": "table_data = [['mussels', '$9 per lb'], ['crab meat', '$7 per lb'], ['oysters', '$3 per lb'], ['shrimp', '$9 per lb'], ['lobster meat', '$12 per lb']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_price_per_lb(table, item):\n    row = get_row_by_value(table, item)\n    price = row[1].split('$')[1].split(' ')[0]\n    return float(price)\n\ndef calculate_total_cost(item, weight, table_data):\n    price_per_lb = get_price_per_lb(table_data, item)\n    total_cost = price_per_lb * weight\n    return total_cost\n\ndef solution(table_data):\n    item = 'oysters'\n    weight = 2.8\n    total_cost = calculate_total_cost(item, weight, table_data)\n    return total_cost"
  },
  {
    "id": "180",
    "question": "Manny kept track of how many kilometers he walked during the past 7 days. What is the range of the numbers?",
    "answer": "8",
    "table_formatter_output": "table_data = [['Day', 'Kilometers'], ['Sunday', 4], ['Monday', 4], ['Tuesday', 10], ['Wednesday', 2], ['Thursday', 7], ['Friday', 3], ['Saturday', 7]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Kilometers'\n    column = get_column_by_name(table_data, column_name)\n    answer = find_range(column)\n    return answer\nprint(solution(table_data)) # Output: 8"
  },
  {
    "id": "187",
    "question": "Cassie has $0.18. How much money will Cassie have left if she buys a spiral snail shell and a scallop shell?",
    "answer": "0.07",
    "table_formatter_output": "table_data = [['orange cone shell', '$0.05'], ['spiral snail shell', '$0.03'], ['purple clam shell', '$0.03'], ['scallop shell', '$0.08']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    total = 0\n    for value in column:\n        total += float(value.strip('$'))\n    return total\n\ndef subtract(starting_amount, cost):\n    return starting_amount - cost\n\ndef solution(table_data):\n    spiral_snail_cost = float(get_column_cell_value(get_row_index_by_value(table_data, 'spiral snail shell'), get_column_by_name(table_data, '$0.03')).strip('$'))\n    scallop_cost = float(get_column_cell_value(get_row_index_by_value(table_data, 'scallop shell'), get_column_by_name(table_data, '$0.08')).strip('$'))\n    starting_amount = 0.18\n    total_cost = spiral_snail_cost + scallop_cost\n    answer = subtract(starting_amount, total_cost)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "207",
    "question": "Joey has $2.00. Does he have enough to buy a bottle of soy sauce and a jar of salsa?",
    "answer": "yes",
    "table_formatter_output": "table_data = [['jar of tomato sauce', '$0.71'], ['bottle of hot sauce', '$0.81'], ['bottle of mustard', '$0.95'], ['bottle of ketchup', '$0.79'], ['bottle of soy sauce', '$0.87'], ['jar of salsa', '$0.98']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_prices(price1, price2):\n    return float(price1[1:]) + float(price2[1:])\n\ndef solution(table_data):\n    bottle_of_soy_sauce_price = get_column_cell_value(4, table_data)\n    jar_of_salsa_price = get_column_cell_value(5, table_data)\n    total_price = sum_prices(bottle_of_soy_sauce_price, jar_of_salsa_price)\n    if total_price <= 2.00:\n        return 'yes'\n    else:\n        return 'no'"
  },
  {
    "id": "212",
    "question": "Liam wants to buy 1.1 kilograms of mozzarella. How much will he spend?",
    "answer": "4.40",
    "table_formatter_output": "table_data = [['blue cheese', '$4 per kg'], ['Brie', '$4 per kg'], ['gouda', '$3 per kg'], ['smoked cheddar', '$4 per kg'], ['mozzarella', '$4 per kg'], ['feta', '$3 per kg']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_price_per_kg(table, item):\n    row = get_row_by_value(table, item)\n    price = row[1].split()[0]\n    return float(price)\n\ndef calculate_total_cost(table, item, quantity):\n    price_per_kg = get_price_per_kg(table, item)\n    total_cost = price_per_kg * quantity\n    return total_cost\n\ndef solution(table_data):\n    item = 'mozzarella'\n    quantity = 1.1\n    total_cost = calculate_total_cost(table_data, item, quantity)\n    return total_cost\nprint(solution(table_data)) # Output: 4.4"
  },
  {
    "id": "213",
    "question": "A charity recorded how many donations it received each month. How many more donations did the charity receive in July than in August?",
    "answer": "602",
    "table_formatter_output": "table_data = [['Month', 'Number of donations'], ['June', 417], ['July', 789], ['August', 187], ['September', 608]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef subtract(a, b):\n    return a - b\n\ndef solution(table_data):\n    column_name = 'Number of donations'\n    column_1 = get_column_by_name(table_data, column_name)\n    july_index = get_row_index_by_value(table_data, 'July')\n    august_index = get_row_index_by_value(table_data, 'August')\n    july_donations = get_column_cell_value(july_index, column_1)\n    august_donations = get_column_cell_value(august_index, column_1)\n    answer = subtract(july_donations, august_donations)\n    return answer"
  },
  {
    "id": "217",
    "question": "To figure out how many vacation days he had left to use, Austin looked over his old calendars to figure out how many days of vacation he had taken each year. According to the table, what was the rate of change between 2015 and 2016?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Year', 'Vacation days'], [2013, 23], [2014, 18], [2015, 11], [2016, 15], [2017, 8]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, year1, year2):\n    column_name = 'Vacation days'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, year1)\n    index_2 = get_row_index_by_value(table_data, year2)\n    value1 = get_column_cell_value(index_1, column_1)\n    value2 = get_column_cell_value(index_2, column_1)\n    change_in_value = value2 - value1\n    change_in_time = year2 - year1\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, 2015, 2016)\n    return rate_of_change"
  },
  {
    "id": "225",
    "question": "Harry, a huge fan, tracked the scores on his favorite radio quiz show. Which score did the fewest people receive?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Score', 'Frequency'], [0, 6], [1, 16], [2, 13], [3, 9], [4, 2], [5, 10]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_min_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    min_value = min(column)\n    return column.index(min_value) + 1 if with_header else column.index(min_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    min_index = find_min_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Score')\n    answer = get_column_cell_value(min_index, column_2)\n    return answer"
  },
  {
    "id": "240",
    "question": "Each desk has 5 highlighters. How many highlighters are on 3 desks?",
    "answer": "15",
    "table_formatter_output": "table_data = [['Number of desks', 'Number of highlighters'], [1, 5], [2, 10], [3, 15]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 3:\n            return row[1] \n\nprint(solution(table_data)) # Output: 15"
  },
  {
    "id": "246",
    "question": "Roxanne has $32.50. Does she have enough to buy a CD and a blender?",
    "answer": "yes",
    "table_formatter_output": "table_data = [['blender', '$14.02'], ['CD', '$18.35'], ['computer mouse', '$10.65'], ['CD player', '$21.84'], ['DVD player', '$53.57'], ['radio', '$15.42']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_prices(table, items):\n    total = 0\n    for item in items:\n        index = get_row_index_by_value(table, item)\n        price = float(table[index][1].replace('$', ''))\n        total += price\n    return total\n\ndef check_affordability(table_data, item1, item2, budget):\n    total_price = sum_prices(table_data, [item1, item2])\n    return total_price <= budget\n\ndef solution(table_data):\n    item1 = 'CD'\n    item2 = 'blender'\n    budget = 32.50\n    answer = \"yes\" if check_affordability(table_data, item1, item2, budget) else \"no\"\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "250",
    "question": "Fans of the Kingwood baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2009 and 2010?",
    "answer": "7",
    "table_formatter_output": "table_data = [['Year', 'Games won'], [2009, 39], [2010, 46], [2011, 36], [2012, 44], [2013, 44]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, start_year, end_year):\n    column_name = 'Games won'\n    column_1 = get_column_by_name(table_data, column_name)\n    start_index = get_row_index_by_value(table_data, start_year)\n    end_index = get_row_index_by_value(table_data, end_year)\n    start_value = get_column_cell_value(start_index, column_1)\n    end_value = get_column_cell_value(end_index, column_1)\n    change_in_value = end_value - start_value\n    change_in_time = end_year - start_year\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\nsolution(table_data, 2009, 2010) # Output: 7"
  },
  {
    "id": "251",
    "question": "Mrs. Whitehead hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2013 and 2014?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Year', 'Number of entries'], ['2012', 36], ['2013', 45], ['2014', 48], ['2015', 46], ['2016', 33]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, year1, year2):\n    column_name = 'Number of entries'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, year1)\n    index_2 = get_row_index_by_value(table_data, year2)\n    entries1 = get_column_cell_value(index_1, column_1)\n    entries2 = get_column_cell_value(index_2, column_1)\n    change_in_entries = entries2 - entries1\n    change_in_time = int(year2) - int(year1)\n    rate_of_change = change_in_entries / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, '2013', '2014')\n    return rate_of_change"
  },
  {
    "id": "256",
    "question": "The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have at least 79 roses?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [3, [3, 7]], [4, [3, 3, 8]], [5, [6, 7, 8]], [6, [2, 5, 8]], [7, [1, 4, 4, 6]], [8, [2, 9]], [9, [0]]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef count_leaves_greater_than_or_equal_to(table, stem_value, threshold):\n    index = get_row_index_by_value(table, stem_value)\n    leaves = table[index][1]\n    count = 0\n    for leaf in leaves:\n        if leaf >= threshold:\n            count += 1\n    return count\n\ndef solution(table_data):\n    threshold = 9\n    count_7 = count_leaves_greater_than_or_equal_to(table_data, 7, threshold)\n    count_8 = count_leaves_greater_than_or_equal_to(table_data, 8, threshold)\n    count_9 = count_leaves_greater_than_or_equal_to(table_data, 9, threshold)\n    total_count = count_7 + count_8 + count_9\n    return total_count\n\nprint(solution(table_data))"
  },
  {
    "id": "273",
    "question": "How much money does Carly need to buy 9 yellow bath towels and 8 fleece blankets?",
    "answer": "120.70",
    "table_formatter_output": "table_data = [['fleece blanket', 5.75], ['flannel sheet', 8.63], ['yellow bath towel', 8.30], ['beach towel', 8.68]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef multiply(a, b):\n    return a * b\n\ndef sum_values(a, b):\n    return a + b\n\ndef solution(table_data):\n    yellow_bath_towel_price = get_column_cell_value(2, table_data)\n    fleece_blanket_price = get_column_cell_value(0, table_data)\n\n    yellow_bath_towels_quantity = 9\n    fleece_blankets_quantity = 8\n\n    yellow_bath_towels_cost = multiply(yellow_bath_towel_price, yellow_bath_towels_quantity)\n    fleece_blankets_cost = multiply(fleece_blanket_price, fleece_blankets_quantity)\n\n    total_cost = sum_values(yellow_bath_towels_cost, fleece_blankets_cost)\n\n    return total_cost\n\nprint(solution(table_data))"
  },
  {
    "id": "286",
    "question": "A newspaper researched how many grocery stores there are in each town. What is the range of the numbers?",
    "answer": "6",
    "table_formatter_output": "table_data = [['Town', 'Number of stores'], ['Watertown', 4], ['Richmond', 7], ['Springfield', 2], ['Marion', 8], ['Greenwood', 7], ['Ashland', 4], ['Mayfield', 7], ['Riverside', 4]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of stores'\n    column_1 = get_column_by_name(table_data, column_name)\n    answer = find_range(column_1)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "288",
    "question": "Look at the table. Then answer the question. At a price of $310, is there a shortage or a surplus?",
    "answer": "surplus",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$90', 15100, 3000], ['$200', 11900, 6900], ['$310', 8700, 10800], ['$420', 5500, 14700], ['$530', 2300, 18600]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    price_index = get_row_index_by_value(table_data, '$310')\n    demand_column = get_column_by_name(table_data, 'Quantity demanded')\n    supply_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    demand_at_price = get_column_cell_value(price_index, demand_column)\n    supply_at_price = get_column_cell_value(price_index, supply_column)\n    \n    if demand_at_price > supply_at_price:\n        return 'shortage'\n    else:\n        return 'surplus'"
  },
  {
    "id": "308",
    "question": "How much money does Rebecca need to buy baked ziti and baked chicken?",
    "answer": "23",
    "table_formatter_output": "table_data = [['pasta with white sauce', '$13.00'], ['lasagna', '$11.00'], ['baked chicken', '$10.00'], ['eggplant parmesan', '$19.00'], ['ravioli', '$10.00'], ['baked ziti', '$13.00']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_prices(items):\n    total = 0\n    for item in items:\n        price = float(item.split('$')[1])\n        total += price\n    return total\n\ndef solution(table_data):\n    items = ['baked ziti', 'baked chicken']\n    prices = get_column_by_name(table_data, 'Price')\n    total_cost = sum_prices([price for item, price in table_data if item in items])\n    return total_cost\nprint(solution(table_data)) # Output: 23.0"
  },
  {
    "id": "310",
    "question": "The city recorded how many fire hydrants there are on each street. What is the range of the numbers?",
    "answer": "7",
    "table_formatter_output": "table_data = [['Street', 'Number of hydrants'], ['Pine Street', 8], ['Cedar Street', 9], ['Fir Street', 5], ['Elm Street', 2], ['Maple Street', 4], ['Lemon Street', 6], ['Aspen Street', 7], ['Rose Street', 5]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    column = column[1:]\n    max_value = max(column)\n    min_value = min(column)\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of hydrants'\n    column_1 = get_column_by_name(table_data, column_name)\n    answer = find_range(column_1)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "316",
    "question": "The McCarthy Senior Care Center monitored how often its residents got to visit with relatives last year. How many residents visited with relatives more than 2 times?",
    "answer": "5",
    "table_formatter_output": "table_data = [['Number of visits', 'Frequency'], [0, 12], [1, 4], [2, 9], [3, 5]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, 2)\n    frequency = get_column_cell_value(index_1, column_1)\n    return frequency"
  },
  {
    "id": "324",
    "question": "As part of a stuffed animal drive for the local children's hospital, the students at Shah Elementary School record how many stuffed animals they have collected. How many students have more than 5 stuffed animals?",
    "answer": "17",
    "table_formatter_output": "table_data = [['Number of stuffed animals', 'Frequency'], [0, 11], [1, 19], [2, 18], [3, 5], [4, 16], [5, 2], [6, 17]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of stuffed animals'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, 6)\n    frequency = get_column_cell_value(index_1, get_column_by_name(table_data, 'Frequency'))\n    return frequency"
  },
  {
    "id": "333",
    "question": "A farm equipment company kept a record of the number of tractors made each month. What is the mean of the numbers?",
    "answer": "94",
    "table_formatter_output": "table_data = [['Month', 'Number of tractors'], ['February', 97], ['March', 93], ['April', 90], ['May', 90], ['June', 98], ['July', 96], ['August', 90], ['September', 98]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef solution(table_data):\n    column_name = 'Number of tractors'\n    column_1 = get_column_by_name(table_data, column_name)\n    total = sum_column(column_1)\n    mean = divide(total, len(column_1) - 1)\n    return mean\n\nprint(solution(table_data))"
  },
  {
    "id": "334",
    "question": "The players on a quiz show received the following scores. What is the mean of the numbers?",
    "answer": "5",
    "table_formatter_output": "table_data = [['Name', 'Score'], ['Neil', 2], ['Austen', 5], ['Ezra', 10], ['Sandeep', 4], ['Rachel', 4]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef solution(table_data):\n    column_name = 'Score'\n    column_1 = get_column_by_name(table_data, column_name)\n    total = sum_column(column_1)\n    count = len(column_1) - 1\n    answer = divide(total, count)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "337",
    "question": "Kelsey, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had at least 25 peppermint candies?",
    "answer": "15",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [2, [0, 0, 5, 7, 8, 8, 9]], [3, [7]], [4, [3, 6, 8]], [5, [0, 1, 3, 5, 5, 6]]]",
    "tool_maker_output": "def get_leaves_greater_than_or_equal_to_n(leaf_list, n):\n    count = 0\n    for leaf in leaf_list:\n        if leaf >= n:\n            count += 1\n    return count\n\ndef solution(table_data):\n    stem_2_leaves = table_data[1][1]\n    count_stem_2 = get_leaves_greater_than_or_equal_to_n(stem_2_leaves, 5)\n\n    count_stem_3 = len(table_data[2][1])\n    count_stem_4 = len(table_data[3][1])\n    count_stem_5 = len(table_data[4][1])\n\n    total_count = count_stem_2 + count_stem_3 + count_stem_4 + count_stem_5\n    return total_count\n\nprint(solution(table_data)) # Output: 15"
  },
  {
    "id": "352",
    "question": "Dr. Dixon, a pediatrician, weighed all the children who recently visited her office. What is the weight of the heaviest child?",
    "answer": "77",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [3, [6, 9]], [4, [1, 2, 3, 5, 6, 9]], [5, [0, 1, 1, 2, 3, 7]], [6, [2, 2, 6, 9]], [7, [2, 2, 5, 5, 7]]]",
    "tool_maker_output": "def get_heaviest_child_weight(table_data):\n    heaviest_stem = table_data[-1][0]\n    heaviest_leaf = max(table_data[-1][1])\n    heaviest_weight = int(str(heaviest_stem) + str(heaviest_leaf))\n    return heaviest_weight\nprint(get_heaviest_child_weight(table_data)) # Output: 77"
  },
  {
    "id": "353",
    "question": "How much money does Lena need to buy 9 fishing poles?",
    "answer": "109.26",
    "table_formatter_output": "table_data = [['volleyball net', 21.91], ['baseball bat', 26.91], ['fishing pole', 12.14], ['swimsuit', 19.60], ['football', 11.01], ['hockey stick', 69.42]]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef multiply(value1, value2):\n    return value1 * value2\n\ndef solution(table_data):\n    item = 'fishing pole'\n    quantity = 9\n    row = get_row_by_value(table_data, item)\n    price = row[1]\n    total_cost = multiply(price, quantity)\n    return total_cost"
  },
  {
    "id": "355",
    "question": "Each drawer in the dresser has 10 blouses. How many blouses are in 4 drawers?",
    "answer": "40",
    "table_formatter_output": "table_data = [['Number of drawers', 'Number of blouses'], [1, 10], [2, 20], [3, 30], [4, 40]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 4:\n            return row[1]"
  },
  {
    "id": "356",
    "question": "Each shopping bag has 2 CDs. How many CDs are in 3 shopping bags?",
    "answer": "6",
    "table_formatter_output": "table_data = [['Number of shopping bags', 'Number of CDs'], [1, 2], [2, 4], [3, 6]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 3:\n            return row[1]"
  },
  {
    "id": "365",
    "question": "Look at this table. Is this relation a function?",
    "answer": "no",
    "table_formatter_output": "table_data = [['x', 'y'], [12, 7], [20, 16], [12, 14], [11, 19]]",
    "tool_maker_output": "def check_functionality(table_data):\n    x_values = [row[0] for row in table_data[1:]]\n    if len(x_values) == len(set(x_values)):\n        return \"yes\"\n    else:\n        return \"no\"\n\nsolution(table_data)"
  },
  {
    "id": "375",
    "question": "Look at the table. Then answer the question. At a price of $1,020, is there a shortage or a surplus?",
    "answer": "shortage",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$940', 21200, 12700], ['$980', 20000, 13500], ['$1,020', 18800, 14300], ['$1,060', 17600, 15100], ['$1,100', 16400, 15900]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    price_index = get_row_index_by_value(table_data, '$1,020')\n    demand_column = get_column_by_name(table_data, 'Quantity demanded')\n    supply_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    demand_at_price = get_column_cell_value(price_index, demand_column)\n    supply_at_price = get_column_cell_value(price_index, supply_column)\n    \n    if demand_at_price > supply_at_price:\n        return 'shortage'\n    else:\n        return 'surplus'"
  },
  {
    "id": "377",
    "question": "A hardware store monitored how many hammers it sold in the past 7 days. What is the range of the numbers?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Day', 'Number of hammers'], ['Friday', 37], ['Saturday', 37], ['Sunday', 37], ['Monday', 38], ['Tuesday', 40], ['Wednesday', 36], ['Thursday', 37]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of hammers'\n    column_1 = get_column_by_name(table_data, column_name)\n    answer = find_range(column_1)\n    return answer"
  },
  {
    "id": "385",
    "question": "A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Eve donate to clean water than Eli?",
    "answer": "10",
    "table_formatter_output": "table_data = [['Person', 'Animal rights', 'Clean water'], ['Eve', '$4', '$15'], ['Eli', '$12', '$5'], ['Bridgette', '$9', '$11'], ['Kamal', '$18', '$11'], ['Janelle', '$13', '$13']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef clean_currency(value):\n    return float(value.replace('$', ''))\n\ndef subtract(a, b):\n    return a - b\n\ndef solution(table_data):\n    clean_table_data = [[row[0], clean_currency(row[1]), clean_currency(row[2])] for row in table_data]\n    eve_index = get_row_index_by_value(clean_table_data, 'Eve')\n    eli_index = get_row_index_by_value(clean_table_data, 'Eli')\n    clean_water_column = get_column_by_name(clean_table_data, 'Clean water')\n    eve_donation = get_column_cell_value(eve_index, clean_water_column)\n    eli_donation = get_column_cell_value(eli_index, clean_water_column)\n    answer = subtract(eve_donation, eli_donation)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "386",
    "question": "Wesley counted the number of desks in each classroom at his school. How many classrooms have exactly 39 desks?",
    "answer": "0",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [1, [0, 1]], [2, [2, 3, 3, 7, 8]], [3, [7]], [4, [0, 2, 3, 5, 8]]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef count_leaves(table, stem, leaf_value):\n    index = get_row_index_by_value(table, stem)\n    leaves = table[index][1]\n    count = leaves.count(leaf_value)\n    return count\n\ndef solution(table_data):\n    stem = 3\n    leaf_value = 9\n    count = count_leaves(table_data, stem, leaf_value)\n    return count\nprint(solution(table_data)) # Output: 0"
  },
  {
    "id": "392",
    "question": "Mrs. Dorsey told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2011 and 2012?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Year', 'Rounds'], [2008, 13], [2009, 12], [2010, 12], [2011, 11], [2012, 14]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, year1, year2):\n    column_name = 'Rounds'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, year1)\n    index_2 = get_row_index_by_value(table_data, year2)\n    rounds1 = get_column_cell_value(index_1, column_1)\n    rounds2 = get_column_cell_value(index_2, column_1)\n    change_in_rounds = rounds2 - rounds1\n    change_in_years = year2 - year1\n    rate_of_change = change_in_rounds / change_in_years\n    return rate_of_change\n\nsolution(table_data, 2011, 2012) # Output: 3"
  },
  {
    "id": "394",
    "question": "A concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 4 days. On which day did the movie theater sell the fewest bags of popcorn?",
    "answer": "Wednesday",
    "table_formatter_output": "table_data = [['Day', 'Number of bags of popcorn'], ['Tuesday', 881], ['Wednesday', 836], ['Thursday', 863], ['Friday', 869]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_min_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    min_value = min(column)\n    return column.index(min_value) + 1 if with_header else column.index(min_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of bags of popcorn'\n    column_1 = get_column_by_name(table_data, column_name)\n    min_index = find_min_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Day')\n    answer = get_column_cell_value(min_index, column_2)\n    return answer"
  },
  {
    "id": "396",
    "question": "Sam has $27.00. Does he have enough to buy a dog calendar and a math book?",
    "answer": "no",
    "table_formatter_output": "table_data = [['math book', '$16.84'], ['dog calendar', '$11.22'], ['dictionary', '$10.10'], ['atlas', '$49.12']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_prices(price1, price2):\n    price1 = float(price1.strip('$'))\n    price2 = float(price2.strip('$'))\n    return price1 + price2\n\ndef enough_money(price1, price2, budget):\n    total_price = sum_prices(price1, price2)\n    return total_price <= budget\n\ndef solution(table_data):\n    dog_calendar_price = get_column_cell_value(1, get_column_by_name(table_data, 'dog calendar'))\n    math_book_price = get_column_cell_value(1, get_column_by_name(table_data, 'math book'))\n    sam_budget = 27.00\n    answer = enough_money(dog_calendar_price, math_book_price, sam_budget)\n    return \"yes\" if answer else \"no\""
  },
  {
    "id": "400",
    "question": "A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Monday and Tuesday?",
    "answer": "9",
    "table_formatter_output": "table_data = [['Day', 'Boxes of cookies'], ['Monday', 20], ['Tuesday', 29], ['Wednesday', 26], ['Thursday', 26], ['Friday', 21]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef find_rate_of_change(table, day1, day2):\n    column_name = 'Boxes of cookies'\n    column_1 = get_column_by_name(table, column_name)\n    index_1 = table.index([day1, get_column_cell_value(table.index([day1, None]), column_1)])\n    index_2 = table.index([day2, get_column_cell_value(table.index([day2, None]), column_1)])\n    change_in_value = get_column_cell_value(index_2, column_1) - get_column_cell_value(index_1, column_1)\n    change_in_time = table.index([day2, None]) - table.index([day1, None])\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    answer = find_rate_of_change(table_data, 'Monday', 'Tuesday')\n    return answer"
  },
  {
    "id": "405",
    "question": "What is the total cost for 1 pound of licorice and 5 pounds of lemon sours?",
    "answer": "14",
    "table_formatter_output": "table_data = [['chocolate-covered raisins', '$2 per pound'], ['licorice', '$4 per pound'], ['lemon sours', '$2 per pound'], ['chocolates', '$2 per pound']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_cost_per_pound(table, item):\n    row = get_row_by_value(table, item)\n    cost = int(row[1].split('$')[1].split()[0])\n    return cost\n\ndef calculate_total_cost(table_data, item1, pounds1, item2, pounds2):\n    cost1 = get_cost_per_pound(table_data, item1)\n    cost2 = get_cost_per_pound(table_data, item2)\n    total_cost = (cost1 * pounds1) + (cost2 * pounds2)\n    return total_cost\n\nsolution = calculate_total_cost(table_data, 'licorice', 1, 'lemon sours', 5)\nprint(solution)"
  },
  {
    "id": "412",
    "question": "A video store clerk looked up the number of movies checked out each day. On which day were the most movies checked out?",
    "answer": "Friday",
    "table_formatter_output": "table_data = [['Day', 'Number of movies'], ['Wednesday', 61], ['Thursday', 62], ['Friday', 68], ['Saturday', 64]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_max_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    max_value = max(column)\n    return column.index(max_value) + 1 if with_header else column.index(max_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of movies'\n    column_1 = get_column_by_name(table_data, column_name)\n    max_index = find_max_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Day')\n    answer = get_column_cell_value(max_index, column_2)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "416",
    "question": "Vijay has $9.00. Does he have enough to buy a book about music and a book about hiking?",
    "answer": "no",
    "table_formatter_output": "table_data = [['book about hiking', '$9.00'], ['book about outer space', '$2.00'], ['book about animals', '$5.00'], ['book about music', '$2.00']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_total_price(table):\n    total = 0\n    for row in table:\n        price = float(row[1].replace('$', ''))\n        total += price\n    return total\n\ndef solution(table_data):\n    book_1 = 'book about hiking'\n    book_2 = 'book about music'\n    price_column = get_column_by_name(table_data, 'Price')\n    total_price = get_total_price(table_data)\n    answer = 'yes' if total_price >= 11.00 else 'no'\n    return answer\n\nsolution(table_data)"
  },
  {
    "id": "418",
    "question": "A stock broker followed the stock prices of a certain set of companies. How much more did Computer Data Company's stock cost on Wednesday than on Thursday?",
    "answer": "8",
    "table_formatter_output": "table_data = [['Company', 'Wednesday', 'Thursday'], ['Houston Sporting Goods', '$1', '$17'], ['Computer Data Company', '$17', '$9'], ['Watson and Partners', '$20', '$19']]",
    "tool_maker_output": "def get_row_by_value(table, row_value):\n    for row in table:\n        if row[0] == row_value:\n            return row\n\ndef get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_cell_value(row, column_name):\n    column_index = table[0].index(column_name)\n    return row[column_index]\n\ndef convert_to_float(value):\n    return float(value.replace('$', ''))\n\ndef subtract_values(value1, value2):\n    return value1 - value2\n\ndef solution(table_data):\n    company_name = 'Computer Data Company'\n    company_row = get_row_by_value(table_data, company_name)\n    wednesday_price = convert_to_float(get_cell_value(company_row, 'Wednesday'))\n    thursday_price = convert_to_float(get_cell_value(company_row, 'Thursday'))\n    price_difference = subtract_values(wednesday_price, thursday_price)\n    return int(price_difference)"
  },
  {
    "id": "430",
    "question": "Look at the table. Then answer the question. At a price of $945, is there a shortage or a surplus?",
    "answer": "shortage",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$855', 23200, 1900], ['$945', 22300, 4600], ['$1035', 21400, 7300], ['$1125', 20500, 10000], ['$1215', 19600, 12700]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    quantity_demanded_column = get_column_by_name(table_data, 'Quantity demanded')\n    quantity_supplied_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    price_index = get_row_index_by_value(table_data, '$945')\n    quantity_demanded = get_column_cell_value(price_index, quantity_demanded_column)\n    quantity_supplied = get_column_cell_value(price_index, quantity_supplied_column)\n    \n    if quantity_demanded > quantity_supplied:\n        return 'shortage'\n    else:\n        return 'surplus'"
  },
  {
    "id": "432",
    "question": "Xavier has $1,416.00. Does he have enough to buy a Jamaican vacation package and a European vacation package?",
    "answer": "yes",
    "table_formatter_output": "table_data = [['European vacation package', '$514.00'], ['Australian vacation package', '$503.00'], ['Hawaiian vacation package', '$569.00'], ['Caribbean vacation package', '$576.00'], ['Jamaican vacation package', '$875.00']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(value1, value2):\n    return float(value1[1:].replace(',', '')) + float(value2[1:].replace(',', ''))\n\ndef solution(table_data):\n    european_price = get_column_cell_value(0, table_data)\n    jamaican_price = get_column_cell_value(4, table_data)\n    total_price = sum_values(european_price, jamaican_price)\n    xavier_money = 1416.00\n    if total_price <= xavier_money:\n        return 'yes'\n    else:\n        return 'no'"
  },
  {
    "id": "437",
    "question": "Mr. Griffith recorded the scores of his students on the most recent math quiz. How many students scored 8?",
    "answer": "1",
    "table_formatter_output": "table_data = [['Score', 'Frequency'], [5, 11], [6, 7], [7, 4], [8, 1], [9, 10], [10, 3]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, 8)\n    answer = get_column_cell_value(index_1, column_1)\n    return answer\nprint(solution(table_data)) # Output: 1"
  },
  {
    "id": "442",
    "question": "Dominic has $8. Does he have enough to buy a dog leash and a bag of cat treats?",
    "answer": "no",
    "table_formatter_output": "table_data = [['box of dog biscuits', '$3'], ['dog bowl', '$3'], ['bag of birdseed', '$8'], ['dog leash', '$5'], ['bag of cat treats', '$4']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(values):\n    total = 0\n    for value in values:\n        total += int(value[1:].replace(',', ''))\n    return total\n\ndef solution(table_data):\n    prices = get_column_by_name(table_data, 'Price')\n    total_cost = sum_values(prices)\n    return total_cost\n\ntotal_cost = solution(table_data)\nprint(total_cost)"
  },
  {
    "id": "449",
    "question": "Clarksville Flooring tracked the number of broken tiles in each shipment it received last year. How many shipments had at least 53 broken tiles?",
    "answer": "8",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [2, [9]], [3, [1, 6, 8, 9]], [4, [1, 2, 3, 7, 9, 9]], [5, [0]], [6, [1, 1, 3, 5, 6]], [7, [0, 6, 8]]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef count_leaves_greater_or_equal_to_threshold(table, threshold):\n    count = 0\n    for row in table[1:]:\n        leaves = row[1]\n        for leaf in leaves:\n            if leaf >= threshold:\n                count += 1\n    return count\n\ndef solution(table_data):\n    threshold = 53\n    stem_5_index = get_row_index_by_value(table_data, 5)\n    stem_6_index = get_row_index_by_value(table_data, 6)\n    stem_7_index = get_row_index_by_value(table_data, 7)\n    \n    count_1 = count_leaves_greater_or_equal_to_threshold(table_data[stem_5_index:], 3)\n    count_2 = count_leaves_greater_or_equal_to_threshold(table_data[stem_6_index:], 3)\n    count_3 = count_leaves_greater_or_equal_to_threshold(table_data[stem_7_index:], 3)\n    \n    total_count = count_1 + count_2 + count_3\n    return total_count"
  },
  {
    "id": "452",
    "question": "A pair of Scott High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2012 and 2013?",
    "answer": "18",
    "table_formatter_output": "table_data = [['Year', 'Games won'], ['2012', 1], ['2013', 19], ['2014', 2], ['2015', 14], ['2016', 15]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, start_year, end_year):\n    column_name = 'Games won'\n    column_1 = get_column_by_name(table_data, column_name)\n    start_index = get_row_index_by_value(table_data, start_year)\n    end_index = get_row_index_by_value(table_data, end_year)\n    start_value = get_column_cell_value(start_index, column_1)\n    end_value = get_column_cell_value(end_index, column_1)\n    change_in_value = end_value - start_value\n    change_in_time = int(end_year) - int(start_year)\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, '2012', '2013')\n    return int(rate_of_change) # Round down to nearest whole number\n\nprint(solution(table_data))"
  },
  {
    "id": "453",
    "question": "If Samuel buys 5 pounds of smoked bacon, 5 pounds of pepperoni, and 1 pound of salami, how much will he spend?",
    "answer": "41",
    "table_formatter_output": "table_data = [['Canadian bacon', '$6/lb'], ['pepperoni', '$4/lb'], ['prosciutto', '$4/lb'], ['salami', '$6/lb'], ['smoked bacon', '$3/lb']]",
    "tool_maker_output": "def get_price_per_pound(table, item):\n    for row in table:\n        if row[0] == item:\n            price = int(row[1].split('$')[1].split('/')[0])\n            return price\n\ndef calculate_total_cost(table_data):\n    smoked_bacon_price = get_price_per_pound(table_data, 'smoked bacon')\n    pepperoni_price = get_price_per_pound(table_data, 'pepperoni')\n    salami_price = get_price_per_pound(table_data, 'salami')\n\n    smoked_bacon_cost = smoked_bacon_price * 5\n    pepperoni_cost = pepperoni_price * 5\n    salami_cost = salami_price * 1\n\n    total_cost = smoked_bacon_cost + pepperoni_cost + salami_cost\n    return total_cost\n\nsolution(table_data)"
  },
  {
    "id": "455",
    "question": "Some friends compared the sizes of their sticker collections. What is the mode of the numbers?",
    "answer": "9",
    "table_formatter_output": "table_data = [['Name', 'Number of stickers'], ['Erik', 9], ['Harper', 9], ['Andy', 8], ['Linda', 9], ['Kristen', 8], ['Travis', 7]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Number of stickers'\n    column = get_column_by_name(table_data, column_name)\n    mode = find_mode(column)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "458",
    "question": "How much more does an apple tart cost than a cherry pie?",
    "answer": "7",
    "table_formatter_output": "table_data = [['cherry pie', '$12'], ['apple tart', '$19'], ['carrot cake', '$11'], ['chocolate cake', '$21']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef remove_dollar_sign(value):\n    return int(value.replace('$', ''))\n\ndef subtract(value1, value2):\n    return value1 - value2\n\ndef solution(table_data):\n    column_name = 'Price'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, 'cherry pie')\n    index_2 = get_row_index_by_value(table_data, 'apple tart')\n    price1 = remove_dollar_sign(get_column_cell_value(index_1, column_1))\n    price2 = remove_dollar_sign(get_column_cell_value(index_2, column_1))\n    answer = subtract(price2, price1)\n    return answer"
  },
  {
    "id": "460",
    "question": "A philanthropic organization compared the amounts of money that its members donated to certain causes. How much did Tamir donate to clean water?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Person', 'Clean water', 'Cancer research'], ['Brendan', 15, 13], ['Tamir', 3, 6], ['Tony', 4, 19], ['Derek', 8, 20], ['Kyle', 10, 17]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    person = 'Tamir'\n    clean_water_index = table_data[0].index('Clean water')\n    person_index = get_row_index_by_value(table_data, person)\n    clean_water_donation = get_column_cell_value(person_index, table_data[clean_water_index])\n    return clean_water_donation"
  },
  {
    "id": "462",
    "question": "Brenda purchased 1.1 pounds of coarse gravel. What was the total cost?",
    "answer": "3.30",
    "table_formatter_output": "table_data = [['fine gravel', '$2 per lb'], ['pebbles', '$3 per lb'], ['black sand', '$3 per lb'], ['rocks', '$3 per lb'], ['coarse gravel', '$3 per lb'], ['white sand', '$5 per lb']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef extract_price_per_lb(row):\n    price = row[1]\n    price = price.replace('$', '')\n    price = price.replace(' per lb', '')\n    return float(price)\n\ndef calculate_total_cost(table_data, item, weight):\n    row = get_row_by_value(table_data, item)\n    price_per_lb = extract_price_per_lb(row)\n    total_cost = price_per_lb * weight\n    return total_cost\n\ndef solution(table_data):\n    item = 'coarse gravel'\n    weight = 1.1\n    total_cost = calculate_total_cost(table_data, item, weight)\n    return total_cost"
  },
  {
    "id": "488",
    "question": "Shelley went to the store and bought 1 pound of shrimp. How much did she spend?",
    "answer": "4.54",
    "table_formatter_output": "table_data = [['lobster meat', '$6.90/pound'], ['mussels', '$6.71/pound'], ['crab meat', '$3.66/pound'], ['scallops', '$3.18/pound'], ['oysters', '$6.66/pound'], ['shrimp', '$4.54/pound']]",
    "tool_maker_output": "def get_price_by_item(table, item):\n    for row in table:\n        if row[0] == item:\n            return float(row[1].split('$')[1].split('/')[0])\n\ndef calculate_total_cost(item, quantity, table_data):\n    price_per_pound = get_price_by_item(table_data, item)\n    total_cost = price_per_pound * quantity\n    return total_cost\n\ndef solution(table_data):\n    item = 'shrimp'\n    quantity = 1\n    answer = calculate_total_cost(item, quantity, table_data)\n    return answer"
  },
  {
    "id": "493",
    "question": "The architecture student counted the number of bricks in each building in his neighborhood. What is the smallest number of bricks?",
    "answer": "58",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [5, [8]], [6, [2]], [7, [2, 7]], [8, [0, 1, 1, 4, 5, 7]], [9, [0]]]",
    "tool_maker_output": "def get_min_number(table_data):\n    min_number = 1000\n    for row in table_data[1:]:\n        stem = row[0]\n        for leaf in row[1]:\n            number = int(str(stem) + str(leaf))\n            if number < min_number:\n                min_number = number\n    return min_number\n\nsolution = get_min_number(table_data)\nprint(solution) # Output: 58"
  },
  {
    "id": "497",
    "question": "A fashion magazine poll asks how many winter hats each reader owns. How many readers are there in all?",
    "answer": "64",
    "table_formatter_output": "table_data = [['Number of winter hats', 'Frequency'], [0, 10], [1, 16], [2, 13], [3, 4], [4, 20], [5, 1]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    total_readers = sum_column(column_1)\n    return total_readers\nprint(solution(table_data)) # Output: 64"
  },
  {
    "id": "499",
    "question": "Look at the table. Then answer the question. At a price of $1,420, is there a shortage or a surplus?",
    "answer": "surplus",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$970', 16500, 2300], ['$1120', 14000, 6800], ['$1270', 11500, 11300], ['$1420', 9000, 15800], ['$1570', 6500, 20300]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    price_index = get_row_index_by_value(table_data, '$1420')\n    demand_column = get_column_by_name(table_data, 'Quantity demanded')\n    supply_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    if demand_column[price_index] < supply_column[price_index]:\n        return 'surplus'\n    else:\n        return 'shortage'"
  },
  {
    "id": "500",
    "question": "Some friends played miniature golf and wrote down their scores. What is the median of the numbers?",
    "answer": "28",
    "table_formatter_output": "table_data = [['Name', 'Score'], ['Dakota', 27], ['Neil', 28], ['Tiana', 32], ['Craig', 27], ['Mia', 28], ['Hazel', 28], ['Lauren', 26]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_median(column):\n    column = column[1:]\n    column.sort()\n    n = len(column)\n    if n % 2 == 0:\n        median = (column[n//2 - 1] + column[n//2]) / 2\n    else:\n        median = column[n//2]\n    return median\n\ndef solution(table_data):\n    column_name = 'Score'\n    column_1 = get_column_by_name(table_data, column_name)\n    median = find_median(column_1)\n    return median\nprint(solution(table_data)) # Output: 28"
  },
  {
    "id": "505",
    "question": "Molly figured out the scores at the end of a card game. How many people scored less than 9?",
    "answer": "53",
    "table_formatter_output": "table_data = [['Score', 'Frequency'], [4, 19], [5, 2], [6, 7], [7, 8], [8, 17], [9, 12], [10, 16]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    scores_to_sum = [4, 5, 6, 7, 8]\n    total = sum_column([column_1[i] for i in range(len(table_data)) if table_data[i][0] in scores_to_sum])\n    return total\nprint(solution(table_data)) # Output: 53"
  },
  {
    "id": "506",
    "question": "A researcher working for a cereal company surveyed people about their cereal consumption habits. How many people ate cereal fewer than 4 times?",
    "answer": "44",
    "table_formatter_output": "table_data = [['Times eaten', 'Frequency'], [0, 3], [1, 14], [2, 16], [3, 11], [4, 5], [5, 15], [6, 12]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_frequencies_less_than_n(table, n):\n    column_1 = get_column_by_name(table, 'Frequency')\n    total = 0\n    for i in range(1, n+1):\n        index = get_column_cell_value(i, column_1)\n        total += index\n    return total\n\ndef solution(table_data):\n    answer = sum_frequencies_less_than_n(table_data, 3)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "512",
    "question": "How much money does Mandy need to buy a piece of plastic pipe and a light bulb?",
    "answer": "1.13",
    "table_formatter_output": "table_data = [['red thumbtack', 0.12], ['piece of plastic pipe', 0.52], ['small metal hook', 0.46], ['ball of twine', 0.30], ['piece of rope', 0.91], ['light bulb', 0.61]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    pipe_index = get_row_index_by_value(table_data, 'piece of plastic pipe')\n    bulb_index = get_row_index_by_value(table_data, 'light bulb')\n    pipe_price = get_column_cell_value(pipe_index, [row[1] for row in table_data])\n    bulb_price = get_column_cell_value(bulb_index, [row[1] for row in table_data])\n    total_price = pipe_price + bulb_price\n    return total_price"
  },
  {
    "id": "514",
    "question": "Lena, who rents properties for a living, measures all the offices in a building she is renting. How many offices are exactly 30 square meters?",
    "answer": "2",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [2, [3, 7, 8]], [3, [0, 0, 5, 7]], [4, [0, 1, 4, 9]], [5, [5, 8, 9]], [6, [4, 8, 9]], [7, [9]], [8, [5, 6, 8]], [9, [0]]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef count_leaves_in_row(row):\n    count = 0\n    for leaf in row:\n        if leaf == 0:\n            count += 1\n    return count\n\ndef solution(table_data):\n    stem = 3\n    leaf = 0\n    index = get_row_index_by_value(table_data, stem)\n    row = table_data[index][1]\n    answer = count_leaves_in_row(row)\n    return answer\nprint(solution(table_data)) # Output: 2"
  },
  {
    "id": "516",
    "question": "Darnell counted the number of words per page in his new book. How many pages have fewer than 92 words?",
    "answer": "8",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [5, [9, 9]], [6, [4, 8]], [7, [2, 6, 6]], [8, []], [9, [0]]]",
    "tool_maker_output": "def get_leaves_less_than_threshold(table, threshold):\n    leaves = []\n    for row in table[1:]:\n        if row[1]:\n            for leaf in row[1]:\n                if leaf < threshold:\n                    leaves.append(leaf)\n    return len(leaves)\n\ndef solution(table_data):\n    threshold = 92\n    answer = get_leaves_less_than_threshold(table_data, threshold)\n    return answer\n\nprint(solution(table_data)) # Output: 8"
  },
  {
    "id": "518",
    "question": "Debbie has $1.50. Does she have enough to buy a package of dental floss and a barrette?",
    "answer": "yes",
    "table_formatter_output": "table_data = [['tube of toothpaste', '$0.92'], ['sewing kit', '$0.91'], ['barrette', '$0.58'], ['lip balm', '$0.91'], ['package of dental floss', '$0.78']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_prices(price1, price2):\n    return float(price1[1:]) + float(price2[1:])\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    dental_floss_index = table_data.index(['package of dental floss', '$0.78'])\n    barrette_index = table_data.index(['barrette', '$0.58'])\n    total_price = sum_prices(price_column[dental_floss_index], price_column[barrette_index])\n    \n    if total_price <= 1.50:\n        return 'yes'\n    else:\n        return 'no'"
  },
  {
    "id": "519",
    "question": "Five of the sports teams from Cedarburg High School decided to raise funds to buy new sports equipment. What fraction of the funds were raised by the track team? Simplify your answer.",
    "answer": "64/389",
    "table_formatter_output": "table_data = [['Team', 'Funds raised ($)'], ['Football', 950], ['Water polo', 730], ['Soccer', 780], ['Track', 640], ['Basketball', 790]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef simplify_fraction(numerator, denominator):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_divisor = gcd(numerator, denominator)\n    return numerator // common_divisor, denominator // common_divisor\n\ndef solution(table_data):\n    column_name = 'Funds raised ($)'\n    column_1 = get_column_by_name(table_data, column_name)\n    total = sum_column(column_1)\n    index_1 = get_row_index_by_value(table_data, 'Track')\n    track_funds = get_column_cell_value(index_1, column_1)\n    fraction_numerator = track_funds\n    fraction_denominator = total\n    simplified_fraction = simplify_fraction(fraction_numerator, fraction_denominator)\n    return simplified_fraction"
  },
  {
    "id": "528",
    "question": "How much money does Nathan need to buy 7 rakes and 3 hammers?",
    "answer": "223",
    "table_formatter_output": "table_data = [['lawn mower', '$52'], ['hammer', '$23'], ['wrench', '$11'], ['measuring tape', '$10'], ['shovel', '$13'], ['rake', '$22']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef multiply(a, b):\n    return a * b\n\ndef add(a, b):\n    return a + b\n\ndef solution(table_data):\n    rake_price = int(get_column_cell_value(5, get_column_by_name(table_data, '$')))\n    hammer_price = int(get_column_cell_value(1, get_column_by_name(table_data, '$')))\n    total_cost_rakes = multiply(rake_price, 7)\n    total_cost_hammers = multiply(hammer_price, 3)\n    total_cost = add(total_cost_rakes, total_cost_hammers)\n    return total_cost"
  },
  {
    "id": "529",
    "question": "Jordan has two dogs, Sprinkles and Champ. He is concerned because Sprinkles keeps eating Champ's food. Jordan asks their vet how much each dog's weight has changed since their last visit. Which dog's weight has changed the most?",
    "answer": "Champ",
    "table_formatter_output": "table_data = [['Dog', 'Weight change (oz.)'], ['Sprinkles', 5], ['Champ', -6]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef find_max_change(table_data):\n    column_name = 'Weight change (oz.)'\n    column_1 = get_column_by_name(table_data, column_name)\n    abs_values = [abs(value) for value in column_1[1:]]\n    max_change = max(abs_values)\n    max_index = abs_values.index(max_change)\n    dogs_column = get_column_by_name(table_data, 'Dog')\n    answer = get_column_cell_value(max_index, dogs_column)\n    return answer\n\nsolution(table_data)"
  },
  {
    "id": "535",
    "question": "Principal Navarro reported the state test scores from some students at her school. How many students scored at least 45 points but fewer than 59 points?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [2, [0]], [3, [4]], [4, [0, 3, 6]], [5, [1, 1, 5]], [6, [0, 4]]]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if row[0] == value:\n            return row\n\ndef count_students_within_range(table_data, lower_bound, upper_bound):\n    count = 0\n    for row in table_data:\n        if row[0] >= lower_bound and row[0] < upper_bound:\n            for leaf in row[1]:\n                if leaf < upper_bound % 10:\n                    count += 1\n    return count\n\ndef solution(table_data):\n    lower_bound = 45\n    upper_bound = 59\n    count = count_students_within_range(table_data, lower_bound // 10, upper_bound // 10)\n    return count"
  },
  {
    "id": "536",
    "question": "Rafi graphed the amount of snow that fell in the last 7 days. What is the median of the numbers?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Day', 'Snowfall (inches)'], ['Friday', 1], ['Saturday', 7], ['Sunday', 8], ['Monday', 4], ['Tuesday', 7], ['Wednesday', 3], ['Thursday', 1]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_median(column):\n    column = column[1:]\n    column.sort()\n    n = len(column)\n    if n % 2 == 0:\n        median = (column[n//2 - 1] + column[n//2]) / 2\n    else:\n        median = column[n//2]\n    return median\n\ndef solution(table_data):\n    column_name = 'Snowfall (inches)'\n    column_1 = get_column_by_name(table_data, column_name)\n    median = find_median(column_1)\n    return median\n\nprint(solution(table_data))"
  },
  {
    "id": "541",
    "question": "As part of a food drive, four friends collected canned food. What fraction of the cans were collected by Tracy? Simplify your answer.",
    "answer": "62/277",
    "table_formatter_output": "table_data = [['Name', 'Number of cans of food'], ['Max', 890], ['Tracy', 620], ['Felix', 610], ['Angie', 650]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef solution(table_data):\n    column_name = 'Number of cans of food'\n    column_1 = get_column_by_name(table_data, column_name)\n    tracy_index = table_data.index(['Tracy', 620])\n    tracy_cans = get_column_cell_value(tracy_index, column_1)\n    total_cans = sum_column(column_1)\n    answer = divide(tracy_cans, total_cans)\n    return answer\nsolution(table_data)"
  },
  {
    "id": "552",
    "question": "Dr. Wilkinson, a pediatrician, weighed all the children who recently visited her office. How many children weighed at least 50 pounds?",
    "answer": "5",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [2, [8]], [3, [1, 7]], [4, []], [5, [5]], [6, [7]], [7, [1, 8]], [8, [0]]]",
    "tool_maker_output": "def count_children_over_50(table_data):\n    count = 0\n    for row in table_data[1:]:\n        if row[0] >= 5:\n            count += len(row[1])\n    return count\n\nsolution = count_children_over_50(table_data)\nprint(solution) # Output: 5"
  },
  {
    "id": "559",
    "question": "Look at this table. Is this relation a function?",
    "answer": "no",
    "table_formatter_output": "table_data = [['x', 'y'], [6, 2], [6, 19], [2, 11]]",
    "tool_maker_output": "def check_functionality(table_data):\n    x_values = []\n    for row in table_data[1:]:\n        x_values.append(row[0])\n    if len(x_values) == len(set(x_values)):\n        return \"yes\"\n    else:\n        return \"no\"\n\nsolution(table_data)"
  },
  {
    "id": "564",
    "question": "How much more does a mountain postcard cost than a rose stamp?",
    "answer": "0.21",
    "table_formatter_output": "table_data = [['large yellow envelope', 0.17], ['small red box', 0.65], ['sheet of animal stamps', 0.50], ['mountain postcard', 0.51], ['rose stamp', 0.30]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef subtract(value1, value2):\n    return value1 - value2\n\ndef solution(table_data):\n    mountain_price = get_column_cell_value(get_row_index_by_value(table_data, 'mountain postcard'), get_column_by_name(table_data, '$'))\n    rose_price = get_column_cell_value(get_row_index_by_value(table_data, 'rose stamp'), get_column_by_name(table_data, '$'))\n    answer = subtract(mountain_price, rose_price)\n    return answer"
  },
  {
    "id": "568",
    "question": "Look at the following schedule. How long does it take to get from Kite Coast to Starfish Point?",
    "answer": "4 hours and 15 minutes",
    "table_formatter_output": "table_data = [['Rocky Cliffs', '7:45 A.M.', '8:30 A.M.', '8:45 A.M.', '9:15 A.M.'],\n              ['Kite Coast', '9:30 A.M.', '10:15 A.M.', '10:30 A.M.', '11:00 A.M.'],\n              ['The Boardwalk', '11:15 A.M.', '12:00 P.M.', '12:15 P.M.', '12:45 P.M.'],\n              ['Ocean City', '12:45 P.M.', '1:30 P.M.', '1:45 P.M.', '2:15 P.M.'],\n              ['Starfish Point', '1:45 P.M.', '2:30 P.M.', '2:45 P.M.', '3:15 P.M.']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_time_difference(start_time, end_time):\n    start_hour, start_minute = map(int, start_time[:-5].split(':'))\n    end_hour, end_minute = map(int, end_time[:-5].split(':'))\n    total_minutes = (end_hour - start_hour) * 60 + (end_minute - start_minute)\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    return hours, minutes\n\ndef solution(table_data):\n    start_location = 'Kite Coast'\n    end_location = 'Starfish Point'\n    row_start = get_row_by_value(table_data, start_location)\n    row_end = get_row_by_value(table_data, end_location)\n    start_time = row_start[1]\n    end_time = row_end[1]\n    hours, minutes = get_time_difference(start_time, end_time)\n    return f\"{hours} hours and {minutes} minutes"
  },
  {
    "id": "571",
    "question": "How much money does Valentina need to buy 9 erasers?",
    "answer": "9.81",
    "table_formatter_output": "table_data = [['box of markers', 3.26], ['eraser', 1.09], ['rubber stamp', 2.62], ['box of paper clips', 1.00]]",
    "tool_maker_output": "def get_row_by_name(table, row_name):\n    for row in table:\n        if row[0] == row_name:\n            return row\n\ndef multiply(a, b):\n    return a * b\n\ndef solution(table_data):\n    row_name = 'eraser'\n    row = get_row_by_name(table_data, row_name)\n    price_per_item = row[1]\n    quantity = 9\n    total_cost = multiply(price_per_item, quantity)\n    return total_cost"
  },
  {
    "id": "574",
    "question": "Each farm has 2 cows. How many cows are on 3 farms?",
    "answer": "6",
    "table_formatter_output": "table_data = [['Number of farms', 'Number of cows'], [1, 2], [2, 4], [3, 6]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if '?' in row:\n            farms = row[0]\n            cows = row[1]\n            return cows\n    return None\n\nsolution(table_data)"
  },
  {
    "id": "576",
    "question": "If Mia buys 1 pound of metal beads and 2 pounds of crystal beads, how much will she spend?",
    "answer": "21",
    "table_formatter_output": "table_data = [['crystal beads', '$7 per pound'], ['metal beads', '$7 per pound'], ['ceramic beads', '$11 per pound'], ['paper beads', '$6 per pound']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_price_per_pound(table, bead_type):\n    row = get_row_by_value(table, bead_type)\n    price = int(row[1].split('$')[1].split()[0])\n    return price\n\ndef calculate_total_cost(table, quantities):\n    total_cost = 0\n    for bead_type, quantity in quantities.items():\n        price_per_pound = get_price_per_pound(table, bead_type)\n        total_cost += price_per_pound * quantity\n    return total_cost\n\ndef solution(table_data):\n    quantities = {'metal beads': 1, 'crystal beads': 2}\n    total_cost = calculate_total_cost(table_data, quantities)\n    return total_cost"
  },
  {
    "id": "577",
    "question": "Bridget earns money for doing chores at home. She kept track of the chores she did in March in this frequency chart. If Bridget earns $2 each time she folds laundry, how much money did she earn for folding laundry in March?",
    "answer": "18",
    "table_formatter_output": "table_data = [['Chore', 'Frequency'], ['washing dishes', 16], ['folding laundry', 9], ['vacuuming', 13]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef multiply(num1, num2):\n    return num1 * num2\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, 'folding laundry')\n    frequency = get_column_cell_value(index_1, column_1)\n    earnings_per_fold = 2\n    answer = multiply(frequency, earnings_per_fold)\n    return answer"
  },
  {
    "id": "584",
    "question": "A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2007 and 2008?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Year', 'Students'], [2007, 41], [2008, 45], [2009, 43], [2010, 44], [2011, 49]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, year1, year2):\n    column_name = 'Students'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, year1)\n    index_2 = get_row_index_by_value(table_data, year2)\n    value1 = get_column_cell_value(index_1, column_1)\n    value2 = get_column_cell_value(index_2, column_1)\n    change_in_value = value2 - value1\n    change_in_time = year2 - year1\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\nsolution(table_data, 2007, 2008) # Output: 4"
  },
  {
    "id": "585",
    "question": "Stacy looked at the dates of the digital photos on her computer to find out how many she had taken in the past 4 days. On which day did Stacy take the fewest photographs?",
    "answer": "Wednesday",
    "table_formatter_output": "table_data = [['Day', 'Number of photographs'], ['Wednesday', 41], ['Thursday', 49], ['Friday', 47], ['Saturday', 46]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_min_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    min_value = min(column)\n    return column.index(min_value) + 1 if with_header else column.index(min_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of photographs'\n    column_1 = get_column_by_name(table_data, column_name)\n    min_index = find_min_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Day')\n    answer = get_column_cell_value(min_index, column_2)\n    return answer"
  },
  {
    "id": "594",
    "question": "How much money does Maria need to buy a birthday candle and a kazoo?",
    "answer": "1.57",
    "table_formatter_output": "table_data = [['kazoo', 0.81], ['party hat', 0.20], ['birthday candle', 0.76], ['red balloon', 0.17]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef add_values(value1, value2):\n    return value1 + value2\n\ndef solution(table_data):\n    candle_index = get_row_index_by_value(table_data, 'birthday candle')\n    kazoo_index = get_row_index_by_value(table_data, 'kazoo')\n    column_1 = get_column_by_name(table_data, '$')\n    candle_price = get_column_cell_value(candle_index, column_1)\n    kazoo_price = get_column_cell_value(kazoo_index, column_1)\n    answer = add_values(candle_price, kazoo_price)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "603",
    "question": "Neil jotted down how many baskets he made during basketball practice each day. What is the range of the numbers?",
    "answer": "6",
    "table_formatter_output": "table_data = [['Day', 'Number of baskets'], ['Sunday', 6], ['Monday', 4], ['Tuesday', 5], ['Wednesday', 9], ['Thursday', 3], ['Friday', 5], ['Saturday', 8]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    numbers = column[1:]\n    max_num = max(numbers)\n    min_num = min(numbers)\n    return max_num - min_num\n\ndef solution(table_data):\n    column_name = 'Number of baskets'\n    column = get_column_by_name(table_data, column_name)\n    answer = find_range(column)\n    return answer\nprint(solution(table_data)) # Output: 6"
  },
  {
    "id": "604",
    "question": "How much money does Philip need to buy 6 teapots and 2 casserole dishes?",
    "answer": "268",
    "table_formatter_output": "table_data = [['teapot', '$38'], ['cookbook', '$19'], ['apron', '$20'], ['baking dish', '$14'], ['casserole dish', '$20']]",
    "tool_maker_output": "def get_price(table, item):\n    for row in table:\n        if row[0] == item:\n            return int(row[1].replace('$', ''))\n\ndef solution(table_data):\n    teapot_cost = get_price(table_data, 'teapot')\n    casserole_cost = get_price(table_data, 'casserole dish')\n    \n    total_cost = (teapot_cost * 6) + (casserole_cost * 2)\n    \n    return total_cost\n\nprint(solution(table_data)) # Output: 268"
  },
  {
    "id": "607",
    "question": "How much more does a designer handbag cost than a pair of designer shoes?",
    "answer": "147",
    "table_formatter_output": "table_data = [['pair of designer shoes', 387], ['designer coat', 563], ['pair of designer boots', 548], ['designer handbag', 534]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    shoes_price = get_column_cell_value(get_row_index_by_value(table_data, 'pair of designer shoes'), get_column_by_name(table_data, '$'))\n    handbag_price = get_column_cell_value(get_row_index_by_value(table_data, 'designer handbag'), get_column_by_name(table_data, '$'))\n    difference = handbag_price - shoes_price\n    return difference"
  },
  {
    "id": "609",
    "question": "Caleb has $127.92. How much money will Caleb have left if he buys a baseball ticket and a basketball ticket?",
    "answer": "80.69",
    "table_formatter_output": "table_data = [['golf ticket', '$59.92'], ['football ticket', '$95.00'], ['baseball ticket', '$10.57'], ['basketball ticket', '$36.66'], ['soccer ticket', '$73.21']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_total_cost(table, items):\n    total_cost = 0\n    for item in items:\n        index = get_row_index_by_value(table, item)\n        cost = float(table[index][1].replace('$', ''))\n        total_cost += cost\n    return total_cost\n\ndef subtract(total_amount, cost):\n    return total_amount - cost\n\ndef solution(table_data):\n    total_amount = 127.92\n    items = ['baseball ticket', 'basketball ticket']\n    total_cost = get_total_cost(table_data, items)\n    answer = subtract(total_amount, total_cost)\n    return round(answer, 2)"
  },
  {
    "id": "610",
    "question": "To get credit for meeting his school's community service requirement, Josiah kept a volunteering log. What is the median of the numbers?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Day', 'Hours'], ['Saturday', 2], ['Sunday', 8], ['Monday', 9], ['Tuesday', 4], ['Wednesday', 8], ['Thursday', 4], ['Friday', 3]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_median(column):\n    column = column[1:]\n    column.sort()\n    n = len(column)\n    if n % 2 == 0:\n        median = (column[n//2 - 1] + column[n//2]) / 2\n    else:\n        median = column[n//2]\n    return median\n\ndef solution(table_data):\n    column_name = 'Hours'\n    column_1 = get_column_by_name(table_data, column_name)\n    median = find_median(column_1)\n    return median\nprint(solution(table_data)) # Output: 4"
  },
  {
    "id": "615",
    "question": "How much money does Zach need to buy a poetry book, a math book, and a history book?",
    "answer": "9",
    "table_formatter_output": "table_data = [['poetry book', '$7'], ['crossword puzzle book', '$1'], ['math book', '$1'], ['mystery novel', '$8'], ['textbook', '$2'], ['history book', '$1']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_total_cost(table, items):\n    total_cost = 0\n    for item in items:\n        row = get_row_by_value(table, item)\n        cost = int(row[1].replace('$', ''))\n        total_cost += cost\n    return total_cost\n\ndef solution(table_data):\n    items = ['poetry book', 'math book', 'history book']\n    total_cost = get_total_cost(table_data, items)\n    return total_cost\n\nprint(solution(table_data))"
  },
  {
    "id": "619",
    "question": "A food industry researcher compiled the revenues of several pizzerias. How much more did Pizza Italia make from pepperoni pizza sales than from supreme pizza sales?",
    "answer": "2",
    "table_formatter_output": "table_data = [['Restaurant', 'Pepperoni pizzas', 'Supreme pizzas'], ['Pizza Italia', '$16', '$14'], ['Pizza, Pasta and More', '$5', '$12'], ['The Real Chicago', '$6', '$18']]",
    "tool_maker_output": "def get_row_by_value(table, row_value):\n    for row in table:\n        if row[0] == row_value:\n            return row\n\ndef get_value_as_float(value):\n    return float(value.replace('$', ''))\n\ndef solution(table_data):\n    pizza_italia_row = get_row_by_value(table_data, 'Pizza Italia')\n    pepperoni_sales = get_value_as_float(pizza_italia_row[1])\n    supreme_sales = get_value_as_float(pizza_italia_row[2])\n    difference = pepperoni_sales - supreme_sales\n    return int(difference)\nprint(solution(table_data)) # Output: 2"
  },
  {
    "id": "620",
    "question": "Emma has $1.72. Does she have enough to buy a hair tie and a comb?",
    "answer": "yes",
    "table_formatter_output": "table_data = [['bar of soap', '$0.98'], ['comb', '$0.75'], ['nail file', '$0.51'], ['hair tie', '$0.94'], ['bottle of hand lotion', '$0.93']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_prices(price_1, price_2):\n    return float(price_1[1:]) + float(price_2[1:])\n\ndef solution(table_data):\n    comb_price = get_column_cell_value(1, table_data)\n    hair_tie_price = get_column_cell_value(3, table_data)\n    total_price = sum_prices(comb_price, hair_tie_price)\n    return \"yes\" if total_price <= 1.72 else \"no\""
  },
  {
    "id": "624",
    "question": "A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2016 and 2017?",
    "answer": "-16",
    "table_formatter_output": "table_data = [['Year', 'Weight (kg)'], [2013, 49], [2014, 28], [2015, 17], [2016, 39], [2017, 23]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, year1, year2):\n    column_name = 'Weight (kg)'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, year1)\n    index_2 = get_row_index_by_value(table_data, year2)\n    weight1 = get_column_cell_value(index_1, column_1)\n    weight2 = get_column_cell_value(index_2, column_1)\n    change_in_weight = weight2 - weight1\n    change_in_time = year2 - year1\n    rate_of_change = change_in_weight / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, 2016, 2017)\n    return rate_of_change"
  },
  {
    "id": "626",
    "question": "In a study on public parking, the director of transportation counted the number of cars in each of the city's parking lots. How many parking lots had exactly 44 cars?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [1, 0], [2, ''], [3, 0], [4, [2, 4, 4, 4, 4]], [5, ''], [6, ''], [7, ''], [8, 0]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef count_leaves(row):\n    if isinstance(row[1], list):\n        return row[1].count(4)\n    else:\n        return 0\n\ndef solution(table_data):\n    stem_value = 4\n    stem_index = get_row_index_by_value(table_data, stem_value)\n    row = table_data[stem_index]\n    answer = count_leaves(row)\n    return answer"
  },
  {
    "id": "644",
    "question": "Each shelf has 10 hats. How many hats are on 5 shelves?",
    "answer": "50",
    "table_formatter_output": "table_data = [['Number of shelves', 'Number of hats'], [1, 10], [2, 20], [3, 30], [4, 40], [5, 50]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of hats'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = table_data[-1][0]\n    answer = get_column_cell_value(index_1, column_1)\n    return answer\n\nsolution(table_data) # Output: 50"
  },
  {
    "id": "647",
    "question": "How much money does Daniel need to buy a black jacket and a green sweatshirt?",
    "answer": "44.08",
    "table_formatter_output": "table_data = [['winter jacket', 28.25], ['denim jacket', 20.85], ['green sweatshirt', 17.48], ['blue sweater', 16.83], ['red sweater', 15.26], ['black jacket', 26.60]]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_total_price(table, items):\n    total_price = 0\n    for item in items:\n        row = get_row_by_value(table, item)\n        total_price += row[1]\n    return total_price\n\ndef solution(table_data):\n    items = ['black jacket', 'green sweatshirt']\n    total_price = get_total_price(table_data, items)\n    return total_price\nprint(solution(table_data)) # Output: 44.08"
  },
  {
    "id": "648",
    "question": "Levi measured the length of each scarf in the clothing store where he works. How many scarves are at least 70 centimeters but less than 80 centimeters?",
    "answer": "8",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [6, [9]], [7, [3, 4, 4, 5, 6, 7, 7, 8]], [8, [0, 1, 1, 2, 3, 4, 6, 6, 7, 7, 7, 9, 9]], [9, [0, 0, 0]]]",
    "tool_maker_output": "def get_leaves_by_stem(table, stem):\n    for row in table:\n        if row[0] == stem:\n            return row[1]\n\ndef count_scarves_between_lengths(table_data, min_length, max_length):\n    leaves_7 = get_leaves_by_stem(table_data, 7)\n    count = 0\n    for leaf in leaves_7:\n        if min_length <= (10 * 7 + leaf) < max_length:\n            count += 1\n    return count\n\nsolution(table_data)"
  },
  {
    "id": "652",
    "question": "For the annual class picnic, each student voted for his or her favorite meal. Did fewer students choose turkey sandwiches or spaghetti for their lunch?",
    "answer": "turkey sandwiches",
    "table_formatter_output": "table_data = [['Lunch', 'Fourth graders', 'Fifth graders'], ['Spaghetti', 7, 13], ['Egg salad', 12, 19], ['Hot dogs', 10, 1], ['Turkey sandwiches', 3, 5]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_row(row, with_header=True):\n    row = row[1:] if with_header else row\n    return sum(row)\n\ndef solution(table_data):\n    spaghetti_row = get_column_by_name(table_data, 'Spaghetti')\n    turkey_row = get_column_by_name(table_data, 'Turkey sandwiches')\n    \n    spaghetti_total = sum_row(spaghetti_row)\n    turkey_total = sum_row(turkey_row)\n    \n    answer = 'turkey sandwiches' if turkey_total < spaghetti_total else 'spaghetti'\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "655",
    "question": "The table shows a function. Is the function linear or nonlinear?",
    "answer": "nonlinear",
    "table_formatter_output": "table_data = [['x', 'y'], [18, 20], [19, 19], [20, 12]]",
    "tool_maker_output": "def get_rate_of_change(x1, y1, x2, y2):\n    return (y2 - y1) / (x2 - x1)\n\ndef is_linear(table_data):\n    x_values = [row[0] for row in table_data[1:]]\n    y_values = [row[1] for row in table_data[1:]]\n    \n    rate_of_changes = []\n    for i in range(len(x_values) - 1):\n        rate_of_changes.append(get_rate_of_change(x_values[i], y_values[i], x_values[i+1], y_values[i+1]))\n    \n    for rate in rate_of_changes:\n        if rate != rate_of_changes[0]:\n            return \"nonlinear\"\n    \n    return \"linear\"\n\nsolution(table_data)"
  },
  {
    "id": "658",
    "question": "A candy dispenser put various numbers of orange candies into bags. What is the largest number of orange candies?",
    "answer": "89",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [3, [1, 6, 8, 9]], [4, [8, 8]], [5, [0, 5, 7, 8]], [6, [6, 8, 8]], [7, [1]], [8, [9]]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_max_value(table):\n    max_value = 0\n    for row in table[1:]:\n        for leaf in row[1]:\n            if row[0]*10 + leaf > max_value:\n                max_value = row[0]*10 + leaf\n    return max_value\n\ndef solution(table_data):\n    max_value = get_max_value(table_data)\n    return max_value\n\nprint(solution(table_data))"
  },
  {
    "id": "659",
    "question": "How much more does a tortoise cost than a ferret?",
    "answer": "117",
    "table_formatter_output": "table_data = [['tortoise', '$468.00'], ['ferret', '$351.00'], ['boa constrictor', '$274.00'], ['parrot', '$727.00']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef remove_dollar_sign(value):\n    return float(value.replace('$', ''))\n\ndef subtract(value1, value2):\n    return value1 - value2\n\ndef solution(table_data):\n    column_name = '$'\n    column_1 = get_column_by_name(table_data, column_name)\n    tortoise_price = remove_dollar_sign(get_column_cell_value(0, column_1))\n    ferret_price = remove_dollar_sign(get_column_cell_value(1, column_1))\n    answer = subtract(tortoise_price, ferret_price)\n    return answer"
  },
  {
    "id": "662",
    "question": "Abby's class recorded how many cans of food each student collected for their canned food drive. What is the mode of the numbers?",
    "answer": "7",
    "table_formatter_output": "table_data = [['Name', 'Number of cans of food'], ['Abby', 7], ['Eliana', 4], ['Isaac', 9], ['Zach', 7], ['Hunter', 7], ['Reba', 9], ['Dwayne', 4]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Number of cans of food'\n    column_1 = get_column_by_name(table_data, column_name)\n    mode = find_mode(column_1)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "665",
    "question": "A grocery store monitored how many paper bags were used in the past 5 days. How many more paper bags did the grocery store use on Sunday than on Monday?",
    "answer": "6,445",
    "table_formatter_output": "table_data = [['Day', 'Number of paper bags'], ['Friday', 6569], ['Saturday', 3016], ['Sunday', 8094], ['Monday', 1649], ['Tuesday', 4366]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef solution(table_data):\n    sunday_index = get_row_index_by_value(table_data, 'Sunday')\n    monday_index = get_row_index_by_value(table_data, 'Monday')\n    sunday_bags = get_column_cell_value(sunday_index, get_column_by_name(table_data, 'Number of paper bags'))\n    monday_bags = get_column_cell_value(monday_index, get_column_by_name(table_data, 'Number of paper bags'))\n    difference = sunday_bags - monday_bags\n    return difference\n\nprint(solution(table_data))"
  },
  {
    "id": "666",
    "question": "Mr. Davidson, a P.E. teacher, wrote down how much weight each of his students could lift. How many people lifted exactly 78 pounds?",
    "answer": "2",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [3, [3, 9]], [4, [6, 6, 9]], [5, [2, 6, 7]], [6, [4, 5, 5, 7]], [7, [0, 1, 4, 5, 6, 6, 6, 8, 8]]]",
    "tool_maker_output": "def get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef count_leaf_in_row(row):\n    return len(row[1])\n\ndef solution(table_data):\n    stem = 7\n    leaf = 8\n    index = get_row_index_by_value(table_data, stem)\n    row = table_data[index]\n    count = row[1].count(leaf)\n    return count\nprint(solution(table_data)) # Output: 2"
  },
  {
    "id": "674",
    "question": "Gordon has $167.97. How much money will Gordon have left if he buys a bearded dragon and a cockatoo?",
    "answer": "88.92",
    "table_formatter_output": "table_data = [['hedgehog', '$68.85'], ['rabbit', '$49.84'], ['tarantula', '$35.97'], ['bearded dragon', '$37.91'], ['cockatoo', '$41.14'], ['scorpion', '$20.72']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef find_total_cost(table_data, items):\n    total_cost = 0\n    for item in items:\n        index = get_row_index_by_value(table_data, item)\n        cost = float(table_data[index][1].replace('$', ''))\n        total_cost += cost\n    return total_cost\n\ndef subtract(total_amount, total_cost):\n    return total_amount - total_cost\n\ndef solution(table_data):\n    items = ['bearded dragon', 'cockatoo']\n    total_amount = 167.97\n    total_cost = find_total_cost(table_data, items)\n    answer = subtract(total_amount, total_cost)\n    return round(answer, 2)"
  },
  {
    "id": "680",
    "question": "How much money does Cole need to buy a glue stick and a bright yellow highlighter?",
    "answer": "0.87",
    "table_formatter_output": "table_data = [['package of crayons', '$0.82'], ['glue stick', '$0.69'], ['bright yellow highlighter', '$0.18'], ['thick black marker', '$0.13']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef add_prices(price1, price2):\n    return float(price1[1:]) + float(price2[1:])\n\ndef solution(table_data):\n    glue_index = get_row_index_by_value(table_data, 'glue stick')\n    highlighter_index = get_row_index_by_value(table_data, 'bright yellow highlighter')\n    glue_price = get_column_cell_value(glue_index, get_column_by_name(table_data, 'Price'))\n    highlighter_price = get_column_cell_value(highlighter_index, get_column_by_name(table_data, 'Price'))\n    answer = add_prices(glue_price, highlighter_price)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "681",
    "question": "How much money does Madelyn need to buy 9 shell necklaces?",
    "answer": "3.87",
    "table_formatter_output": "table_data = [['pin with a picture of the beach', 0.83], ['picture of a shark', 0.87], ['souvenir cup', 0.79], ['shell necklace', 0.43], ['dolphin bookmark', 0.90]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef multiply(a, b):\n    return a * b\n\ndef solution(table_data):\n    column_name = 'shell necklace'\n    column_1 = get_column_by_name(table_data, column_name)\n    price_per_necklace = get_column_cell_value(0, column_1)\n    quantity = 9\n    total_cost = multiply(price_per_necklace, quantity)\n    return total_cost"
  },
  {
    "id": "684",
    "question": "Each bin has 10 yellow blocks. How many yellow blocks are in 4 bins?",
    "answer": "40",
    "table_formatter_output": "table_data = [['Number of bins', 'Number of yellow blocks'], [1, 10], [2, 20], [3, 30], [4, 40]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of yellow blocks'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = table_data[-1][0] - 1\n    answer = get_column_cell_value(index_1, column_1)\n    return answer\n\nsolution(table_data) # Output: 40"
  },
  {
    "id": "690",
    "question": "Look at the table. Then answer the question. At a price of $1,110, is there a shortage or a surplus?",
    "answer": "shortage",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$990', 24400, 4100], ['$1110', 24300, 8100], ['$1230', 24200, 12100], ['$1350', 24100, 16100], ['$1470', 24000, 20100]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    quantity_demanded_column = get_column_by_name(table_data, 'Quantity demanded')\n    quantity_supplied_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    price_index = get_row_index_by_value(table_data, '$1110')\n    quantity_demanded = get_column_cell_value(price_index, quantity_demanded_column)\n    quantity_supplied = get_column_cell_value(price_index, quantity_supplied_column)\n    \n    if quantity_demanded > quantity_supplied:\n        return 'shortage'\n    else:\n        return 'surplus'"
  },
  {
    "id": "691",
    "question": "Each tool box has 10 tape measures. How many tape measures are in 3 tool boxes?",
    "answer": "30",
    "table_formatter_output": "table_data = [['Number of tool boxes', 'Number of tape measures'], [1, 10], [2, 20], [3, 30]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 3:\n            return row[1]"
  },
  {
    "id": "696",
    "question": "Each bush has 10 roses. How many roses are on 4 bushes?",
    "answer": "40",
    "table_formatter_output": "table_data = [['Number of bushes', 'Number of roses'], [1, 10], [2, 20], [3, 30], [4, 40]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 4:\n            return row[1]"
  },
  {
    "id": "698",
    "question": "While writing a paper on making decisions in groups, Desmond researched the size of a number of committees. How many committees have exactly 17 members?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [1, [0, 2, 7, 7, 7]], [2, [8]], [3, [5]], [4, []], [5, []], [6, [2]], [7, []], [8, [0, 3]], [9, [0]]]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if row[0] == value:\n            return row\n\ndef count_occurrences(lst, value):\n    return lst.count(value)\n\ndef solution(table_data):\n    target_stem = 1\n    target_leaf = 7\n    row = get_row_by_value(table_data, target_stem)\n    occurrences = count_occurrences(row[1], target_leaf)\n    return occurrences\nprint(solution(table_data)) # Output: 3"
  },
  {
    "id": "705",
    "question": "Carly buys 1+3/10 pounds of balsamic vinaigrette. What is the total cost?",
    "answer": "3.90",
    "table_formatter_output": "table_data = [['Thousand Island dressing', '$3 per lb'], ['raspberry vinaigrette', '$4 per lb'], ['Italian dressing', '$7 per lb'], ['blue cheese dressing', '$3 per lb'], ['balsamic vinaigrette', '$3 per lb']]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef extract_price(price_string):\n    return float(price_string.strip('$').split()[0])\n\ndef multiply(a, b):\n    return a * b\n\ndef solution(table_data):\n    item = 'balsamic vinaigrette'\n    pounds = 1 + 3/10\n    row = get_row_by_value(table_data, item)\n    price_per_lb = extract_price(row[1])\n    total_cost = multiply(price_per_lb, pounds)\n    return total_cost"
  },
  {
    "id": "707",
    "question": "A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Wednesday and Thursday?",
    "answer": "-6",
    "table_formatter_output": "table_data = [['Day', 'Leftover loaves'], ['Sunday', 35], ['Monday', 32], ['Tuesday', 38], ['Wednesday', 47], ['Thursday', 41]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, day1, day2):\n    column_name = 'Leftover loaves'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, day1)\n    index_2 = get_row_index_by_value(table_data, day2)\n    value1 = get_column_cell_value(index_1, column_1)\n    value2 = get_column_cell_value(index_2, column_1)\n    change_in_value = value2 - value1\n    change_in_time = 1  # Assuming the change is over 1 day\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\nsolution(table_data, 'Wednesday', 'Thursday')  # Output: -6"
  },
  {
    "id": "708",
    "question": "Look at Khadijah's pay stub. Khadijah lives in a state without state income tax. How much did Khadijah make after taxes?",
    "answer": "1,454.36",
    "table_formatter_output": "table_data = [['Employee', 'Pay period', ''], ['Khadijah Nair', 'December', ''], ['Total earnings', '', '$1,790.00'], ['Federal income tax', '$198.74', ''], ['Other taxes', '$136.90', ''], ['Total taxes', '', '?'], ['Pay after taxes', '', '?']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef find_missing_value(table, column_name):\n    total_earnings = float(get_column_cell_value(2, get_column_by_name(table, ''))\n    federal_tax = float(get_column_cell_value(1, get_column_by_name(table, 'Federal income tax'))\n    other_taxes = float(get_column_cell_value(1, get_column_by_name(table, 'Other taxes'))\n    total_taxes = federal_tax + other_taxes\n    pay_after_taxes = total_earnings - total_taxes\n    return pay_after_taxes\n\nsolution(table_data)"
  },
  {
    "id": "710",
    "question": "An art instructor kept track of how many total pictures were painted by each of the people enrolled in her class. How many people painted exactly 1 picture?",
    "answer": "0",
    "table_formatter_output": "table_data = [['Pictures painted', 'Frequency'], [0, 7], [1, 0], [2, 6], [3, 1], [4, 9]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, 'Pictures painted')\n    index_1 = get_row_index_by_value(table_data, 1)\n    answer = get_column_cell_value(index_1, get_column_by_name(table_data, column_name))\n    return answer"
  },
  {
    "id": "711",
    "question": "Look at the following schedule. When does the juggler's performance begin?",
    "answer": "5:45 P.M.",
    "table_formatter_output": "table_data = [['Performer', 'Begin', 'End'], ['the jugglers', '5:45 P.M.', '6:20 P.M.'], ['the acrobats', '6:35 P.M.', '7:00 P.M.'], ['the tightrope walkers', '7:05 P.M.', '7:30 P.M.'], ['the strongman', '7:35 P.M.', '8:10 P.M.'], ['the ringmaster', '8:25 P.M.', '8:40 P.M.'], ['the clowns', '8:50 P.M.', '9:05 P.M.']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    performer = 'the jugglers'\n    begin_column = get_column_by_name(table_data, 'Begin')\n    performer_index = get_row_index_by_value(table_data, performer)\n    begin_time = get_column_cell_value(performer_index, begin_column)\n    return begin_time\n\nprint(solution(table_data))"
  },
  {
    "id": "716",
    "question": "Each plant has 2 peppers. How many peppers are on 6 plants?",
    "answer": "12",
    "table_formatter_output": "table_data = [['Number of plants', 'Number of peppers'], [1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 6:\n            return row[1]\nprint(solution(table_data)) # Output: 12"
  },
  {
    "id": "729",
    "question": "A food industry researcher compiled the revenues of several pizzerias. How much did Taste of New York make from pizza sales?",
    "answer": "23",
    "table_formatter_output": "table_data = [['Restaurant', 'Vegetarian pizzas', 'Cheese pizzas'], ['Dan\\'s Deep Dish', '$10', '$11'], ['Taste of New York', '$10', '$13'], ['The Big Cheese', '$16', '$8'], ['Pizzas Only', '$17', '$17']]",
    "tool_maker_output": "def get_row_by_value(table, row_value):\n    for row in table:\n        if row[0] == row_value:\n            return row\n\ndef extract_numbers_from_row(row):\n    numbers = [int(''.join(filter(str.isdigit, num))) for num in row[1:]]\n    return numbers\n\ndef sum_numbers(numbers):\n    return sum(numbers)\n\ndef solution(table_data):\n    row = get_row_by_value(table_data, 'Taste of New York')\n    numbers = extract_numbers_from_row(row)\n    answer = sum_numbers(numbers)\n    return answer\nprint(solution(table_data)) # Output: 23"
  },
  {
    "id": "733",
    "question": "Tanner has $35. Does he have enough to buy a black jacket and a pair of shorts?",
    "answer": "no",
    "table_formatter_output": "table_data = [['pair of khaki pants', 13], ['green sweatshirt', 10], ['pair of sweat pants', 20], ['pair of brown pants', 25], ['pair of shorts', 11], ['black jacket', 26]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(values):\n    return sum(values)\n\ndef can_afford_items(table_data, item1, item2, budget):\n    prices = get_column_by_name(table_data, 'Price')\n    item1_price = get_column_cell_value(item1, prices)\n    item2_price = get_column_cell_value(item2, prices)\n    total_price = item1_price + item2_price\n    return total_price <= budget\n\ndef solution(table_data):\n    item1 = 'black jacket'\n    item2 = 'pair of shorts'\n    budget = 35\n    answer = can_afford_items(table_data, item1, item2, budget)\n    return 'yes' if answer else 'no'"
  },
  {
    "id": "737",
    "question": "The art club examined how many cookies each student baked for the bake sale. Together, how many cookies did Whitney and Jeanette bake?",
    "answer": "676",
    "table_formatter_output": "table_data = [['Name', 'Number of cookies'], ['Whitney', 437], ['Jeanette', 239], ['Zachary', 222]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef sum_values(row1, row2):\n    return row1 + row2\n\ndef solution(table_data):\n    column_name = 'Number of cookies'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, 'Whitney')\n    index_2 = get_row_index_by_value(table_data, 'Jeanette')\n    cookies_whitney = get_column_cell_value(index_1, column_1)\n    cookies_jeanette = get_column_cell_value(index_2, column_1)\n    answer = sum_values(cookies_whitney, cookies_jeanette)\n    return answer"
  },
  {
    "id": "748",
    "question": "At a swim meet, Ernesto noted the size of various swim teams. How many teams have at least 30 swimmers?",
    "answer": "12",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [2, [2, 3, 7, 7]], [3, [2]], [4, [0, 3, 4]], [5, [1, 4, 8]], [6, [2, 2, 4, 5, 9]]]",
    "tool_maker_output": "def get_leaves_by_stem(table, stem):\n    for row in table:\n        if row[0] == stem:\n            return row[1]\n\ndef count_teams_with_at_least_30(table_data):\n    stems = [3, 4, 5, 6]\n    total_leaves = 0\n    for stem in stems:\n        leaves = get_leaves_by_stem(table_data, stem)\n        total_leaves += len(leaves)\n    return total_leaves\n\nsolution(table_data)"
  },
  {
    "id": "749",
    "question": "Lily and her friends recorded their scores while playing a board game. Which score did the greatest number of people receive?",
    "answer": "8",
    "table_formatter_output": "table_data = [['Score', 'Frequency'], [6, 4], [7, 10], [8, 18], [9, 6], [10, 8]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_max_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    max_value = max(column)\n    return column.index(max_value) + 1 if with_header else column.index(max_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    max_index = find_max_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Score')\n    answer = get_column_cell_value(max_index, column_2)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "750",
    "question": "Professor Livingston informed her students of their scores on the midterm exam. What is the lowest score?",
    "answer": "15",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [1, [5, 9]], [2, [8]], [3, []], [4, [7]], [5, [2]], [6, [2]], [7, [1]], [8, [8]]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_min_score(table_data):\n    min_score = 100\n    for row in table_data[1:]:\n        stem = row[0]\n        if len(row[1]) > 0:\n            leaf = min(row[1])\n            score = int(str(stem) + str(leaf))\n            if score < min_score:\n                min_score = score\n    return min_score\n\ndef solution(table_data):\n    min_score = get_min_score(table_data)\n    return min_score\n\nprint(solution(table_data))"
  },
  {
    "id": "752",
    "question": "How much would it cost to buy 3 kilograms of kettle corn and 2 kilograms of Parmesan popcorn?",
    "answer": "4.89",
    "table_formatter_output": "table_data = [['caramel corn', '$1.13 per kg'], ['chocolate popcorn', '$1.78 per kg'], ['kettle corn', '$0.69 per kg'], ['ranch popcorn', '$1.72 per kg'], ['cheddar popcorn', '$0.90 per kg'], ['Parmesan popcorn', '$1.41 per kg']]",
    "tool_maker_output": "def get_price_per_kg(table, item):\n    for row in table:\n        if row[0] == item:\n            price = float(row[1].split()[0][1:])\n            return price\n\ndef calculate_total_cost(table_data, item1, quantity1, item2, quantity2):\n    price1 = get_price_per_kg(table_data, item1)\n    price2 = get_price_per_kg(table_data, item2)\n    cost1 = price1 * quantity1\n    cost2 = price2 * quantity2\n    total_cost = cost1 + cost2\n    return total_cost\n\nsolution = calculate_total_cost(table_data, 'kettle corn', 3, 'Parmesan popcorn', 2)\nprint(solution) # Output: 4.89"
  },
  {
    "id": "758",
    "question": "Kari wrote down how many glasses of water she drank during the past 7 days. What is the mode of the numbers?",
    "answer": "7",
    "table_formatter_output": "table_data = [['Day', 'Number of glasses'], ['Friday', 6], ['Saturday', 7], ['Sunday', 6], ['Monday', 11], ['Tuesday', 7], ['Wednesday', 7], ['Thursday', 11]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Number of glasses'\n    column_1 = get_column_by_name(table_data, column_name)\n    mode = find_mode(column_1)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "759",
    "question": "Each bag has 5 silver buttons. How many silver buttons are in 4 bags?",
    "answer": "20",
    "table_formatter_output": "table_data = [['Number of bags', 'Number of silver buttons'], [1, 5], [2, 10], [3, 15], [4, 20]]",
    "tool_maker_output": "def solution(table_data):\n    for row in table_data:\n        if row[0] == 4:\n            return row[1]"
  },
  {
    "id": "762",
    "question": "Look at the following schedule. When does the relay race end?",
    "answer": "1:10 P.M.",
    "table_formatter_output": "table_data = [['Event', 'Begin', 'End'], ['tug-of-war', '11:40 A.M.', '12:10 P.M.'], ['relay race', '12:25 P.M.', '1:10 P.M.'], ['jump rope race', '1:20 P.M.', '2:15 P.M.'], ['hula hoop contest', '2:30 P.M.', '2:40 P.M.'], ['water balloon toss', '2:50 P.M.', '3:40 P.M.'], ['scooter race', '3:50 P.M.', '4:45 P.M.'], ['potato sack race', '4:55 P.M.', '5:30 P.M.']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    event = 'relay race'\n    end_column = get_column_by_name(table_data, 'End')\n    event_index = get_row_index_by_value(table_data, event)\n    end_time = get_column_cell_value(event_index, end_column)\n    return end_time\nprint(solution(table_data))"
  },
  {
    "id": "775",
    "question": "A printing shop kept a log of how many sheets of paper were used in the past 5 days. How many sheets of paper in total did the printing shop use on Tuesday and Wednesday?",
    "answer": "3,787",
    "table_formatter_output": "table_data = [['Day', 'Number of sheets of paper'], ['Monday', 6116], ['Tuesday', 1176], ['Wednesday', 2611], ['Thursday', 1667], ['Friday', 2374]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef find_total_sheets(table_data, days):\n    column_1 = get_column_by_name(table_data, 'Day')\n    column_2 = get_column_by_name(table_data, 'Number of sheets of paper')\n    total_sheets = 0\n    for day in days:\n        index = column_1.index(day)\n        total_sheets += get_column_cell_value(index, column_2)\n    return total_sheets\n\ndef solution(table_data):\n    days = ['Tuesday', 'Wednesday']\n    answer = find_total_sheets(table_data, days)\n    return answer\nprint(solution(table_data)) # Output: 3787"
  },
  {
    "id": "785",
    "question": "Look at the table. Then answer the question. At a price of $360, is there a shortage or a surplus?",
    "answer": "surplus",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$140', 16900, 7600], ['$250', 13300, 10600], ['$360', 9700, 13600], ['$470', 6100, 16600], ['$580', 2500, 19600]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    price_index = get_row_index_by_value(table_data, '$360')\n    demand_column = get_column_by_name(table_data, 'Quantity demanded')\n    supply_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    demand_at_price = get_column_cell_value(price_index, demand_column)\n    supply_at_price = get_column_cell_value(price_index, supply_column)\n    \n    if demand_at_price > supply_at_price:\n        return 'shortage'\n    else:\n        return 'surplus'"
  },
  {
    "id": "792",
    "question": "The school district compared how many math teachers each high school has. What is the mean of the numbers?",
    "answer": "5",
    "table_formatter_output": "table_data = [['High school', 'Number of math teachers'], ['Moore High', 7], ['Northside High', 5], ['Lincoln High', 2], ['River High', 7], ['Green High', 4], ['Washington High', 7], ['Central High', 6], ['Thompson High', 2]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef solution(table_data):\n    column_name = 'Number of math teachers'\n    column = get_column_by_name(table_data, column_name)\n    numbers = column[1:]\n    answer = mean(numbers)\n    return answer\nsolution(table_data)"
  },
  {
    "id": "793",
    "question": "What is the total cost for 1 pound of size 6 screws and 1 pound of size 1 screws?",
    "answer": "14",
    "table_formatter_output": "table_data = [['size 4 screws', '$8 per lb'], ['size 2 screws', '$10 per lb'], ['size 3 screws', '$10 per lb'], ['size 5 screws', '$6 per lb'], ['size 1 screws', '$5 per lb'], ['size 6 screws', '$9 per lb']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_cost_per_pound(table, screw_size):\n    for row in table:\n        if row[0] == screw_size:\n            cost = int(row[1].split('$')[1].split()[0])\n            return cost\n\ndef solution(table_data):\n    size_6_cost = get_cost_per_pound(table_data, 'size 6 screws')\n    size_1_cost = get_cost_per_pound(table_data, 'size 1 screws')\n    total_cost = size_6_cost + size_1_cost\n    return total_cost\n\nprint(solution(table_data))"
  },
  {
    "id": "794",
    "question": "A farmer wrote down how many kilograms of cherries were sold in the past 3 days. How many kilograms of cherries in total were sold on Tuesday and Wednesday?",
    "answer": "4,988",
    "table_formatter_output": "table_data = [['Day', 'Kilograms'], ['Monday', 1559], ['Tuesday', 1984], ['Wednesday', 3004]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(row_indexes, column):\n    total = 0\n    for index in row_indexes:\n        total += get_column_cell_value(index, column)\n    return total\n\ndef solution(table_data):\n    column_name = 'Kilograms'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_tuesday = table_data[1][0]\n    index_wednesday = table_data[2][0]\n    total_kilograms = sum_values([index_tuesday, index_wednesday], column_1)\n    return total_kilograms\n\nprint(solution(table_data))"
  },
  {
    "id": "809",
    "question": "What is the total cost for 4/5 of a kilogram of macadamia nuts?",
    "answer": "3.20",
    "table_formatter_output": "table_data = [['Brazil nuts', '$3/kilogram'], ['chestnuts', '$5/kilogram'], ['peanuts', '$4/kilogram'], ['macadamia nuts', '$4/kilogram']]",
    "tool_maker_output": "def get_price_per_kilogram(table, item):\n    for row in table:\n        if row[0] == item:\n            price = float(row[1].strip('$').split('/')[0])\n            return price\n\ndef calculate_total_cost(table, item, weight):\n    price_per_kg = get_price_per_kilogram(table, item)\n    total_cost = price_per_kg * weight\n    return total_cost\n\ndef solution(table_data):\n    item = 'macadamia nuts'\n    weight = 4/5\n    answer = calculate_total_cost(table_data, item, weight)\n    return answer\nprint(solution(table_data)) # Output: 3.2"
  },
  {
    "id": "811",
    "question": "The Springdale Chamber of Commerce researched the number of employees working at local companies. How many companies have at least 10 employees but less than 30 employees?",
    "answer": "14",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [1, [0, 8, 8, 9, 9]], [2, [1, 1, 3, 3, 8, 8, 8, 8, 9]], [3, [1, 5, 6]], [4, [1, 3, 4, 7, 9]], [5, [8, 8, 8]]]",
    "tool_maker_output": "def get_leaves_by_stem(table, stem):\n    for row in table:\n        if row[0] == stem:\n            return row[1]\n\ndef count_companies(table_data):\n    total = 0\n    for i in range(1, 3):\n        leaves = get_leaves_by_stem(table_data, i)\n        total += len(leaves)\n    return total\n\nsolution(table_data)"
  },
  {
    "id": "817",
    "question": "Gabriel conducted a blind taste test on some of his friends in order to determine if organic fruits tasted different than non-organic fruits. Each friend ate one type of fruit. What is the probability that a randomly selected friend tasted apples and preferred non-organic? Simplify any fractions.",
    "answer": "5/11",
    "table_formatter_output": "table_data = [['', 'Organic', 'Non-organic'], ['Apples', 3, 5], ['Peaches', 1, 2]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\ndef solution(table_data):\n    column_name_1 = 'Organic'\n    column_1 = get_column_by_name(table_data, column_name_1)\n    column_name_2 = 'Non-organic'\n    column_2 = get_column_by_name(table_data, column_name_2)\n    index_1 = 0  # Row index for 'Apples'\n    index_2 = 1  # Row index for 'Non-organic'\n    apples_non_organic = get_column_cell_value(index_1, column_2)\n    total_friends = sum_column(column_1) + sum_column(column_2)\n    answer = divide(apples_non_organic, total_friends)\n    return answer"
  },
  {
    "id": "823",
    "question": "Alexandra went to the store and bought 2.2 pounds of marinara sauce. How much did she spend?",
    "answer": "8.80",
    "table_formatter_output": "table_data = [['marinara sauce', '$4/lb'], ['tomato sauce', '$7/lb'], ['chicken sauce', '$7/lb'], ['pesto sauce', '$5/lb'], ['alfredo sauce', '$3/lb']]",
    "tool_maker_output": "def get_price_per_pound(table, item):\n    for row in table:\n        if row[0] == item:\n            price = float(row[1].strip('$').strip('/lb'))\n            return price\n\ndef calculate_total_cost(table, item, pounds):\n    price_per_pound = get_price_per_pound(table, item)\n    total_cost = price_per_pound * pounds\n    return total_cost\n\ndef solution(table_data):\n    item = 'marinara sauce'\n    pounds = 2.2\n    answer = calculate_total_cost(table_data, item, pounds)\n    return answer"
  },
  {
    "id": "829",
    "question": "Look at the table. Then answer the question. At a price of $1,340, is there a shortage or a surplus?",
    "answer": "surplus",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$920', 22400, 7800], ['$1,060', 20000, 11100], ['$1,200', 17600, 14400], ['$1,340', 15200, 17700], ['$1,480', 12800, 21000]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    quantity_demanded_column = get_column_by_name(table_data, 'Quantity demanded')\n    quantity_supplied_column = get_column_by_name(table_data, 'Quantity supplied')\n    \n    price_index = get_row_index_by_value(table_data, '$1,340')\n    quantity_demanded = get_column_cell_value(price_index, quantity_demanded_column)\n    quantity_supplied = get_column_cell_value(price_index, quantity_supplied_column)\n    \n    if quantity_demanded < quantity_supplied:\n        return 'surplus'\n    else:\n        return 'shortage'"
  },
  {
    "id": "832",
    "question": "Joy is a sandwich maker at a local deli. Last week, she tracked the number of peanut butter and jelly sandwiches ordered, noting the flavor of jelly and type of peanut butter requested. What is the probability that a randomly selected sandwich was made with grape jelly and chunky peanut butter? Simplify any fractions.",
    "answer": "7/20",
    "table_formatter_output": "table_data = [['', 'Creamy peanut butter', 'Chunky peanut butter'], ['Strawberry jelly', 7, 3], ['Grape jelly', 3, 7]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_table(table):\n    total = 0\n    for row in table[1:]:\n        total += sum(row[1:])\n    return total\n\ndef find_probability(table_data, event):\n    event_row = event[0]\n    event_column = event[1]\n    event_count = table_data[event_row][event_column]\n    total_count = sum_table(table_data)\n    probability = event_count / total_count\n    return probability\n\ndef solution(table_data):\n    event = ('Grape jelly', 2)\n    answer = find_probability(table_data, event)\n    return answer\nprint(solution(table_data)) # Output: 0.35 (or 7/20)"
  },
  {
    "id": "852",
    "question": "Mateo has $92. How much money will Mateo have left if he buys a pair of sweat pants and a green sweatshirt?",
    "answer": "60",
    "table_formatter_output": "table_data = [['denim jacket', '$24'], ['pair of boots', '$27'], ['pair of jeans', '$39'], ['pair of shoes', '$28'], ['green sweatshirt', '$12'], ['pair of sweat pants', '$20']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(values):\n    total = 0\n    for value in values:\n        total += int(value.strip('$'))\n    return total\n\ndef solution(table_data):\n    items = ['pair of sweat pants', 'green sweatshirt']\n    column_1 = get_column_by_name(table_data, 'denim jacket')\n    column_2 = get_column_by_name(table_data, 'pair of boots')\n    column_3 = get_column_by_name(table_data, 'pair of jeans')\n    column_4 = get_column_by_name(table_data, 'pair of shoes')\n    column_5 = get_column_by_name(table_data, 'green sweatshirt')\n    column_6 = get_column_by_name(table_data, 'pair of sweat pants')\n    \n    total_cost = sum_values([get_column_cell_value(items.index(item)+1, column_1) for item in items])\n    remaining_money = 92 - total_cost\n    return remaining_money\n\nprint(solution(table_data))"
  },
  {
    "id": "863",
    "question": "Abdul just downloaded the new game Gem Excavator on his phone. In the first level, Abdul gains points for each green gem he finds. However, he loses points for each red gem he finds. The table shows how the gems affect Abdul's points. Which color gem affects Abdul's points less?",
    "answer": "green",
    "table_formatter_output": "table_data = [['Gem color', 'Change in points'], ['Green', 25], ['Red', -40]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef find_less_effect(table_data):\n    column_name = 'Change in points'\n    column_1 = get_column_by_name(table_data, column_name)\n    abs_column = [abs(value) for value in column_1]\n    min_index = abs_column.index(min(abs_column))\n    column_2 = get_column_by_name(table_data, 'Gem color')\n    answer = get_column_cell_value(min_index, column_2)\n    return answer\n\nsolution(table_data)"
  },
  {
    "id": "865",
    "question": "Look at Max's pay stub. Max lives in a state that has state income tax. How much payroll tax did Max pay in total?",
    "answer": "1,283.39",
    "table_formatter_output": "table_data = [['Employee', 'Pay period', ''], ['Max Stephenson', 'November', ''], ['Total earnings', '', '$4,407.00'], ['Federal income tax', '$624.58', ''], ['State income tax', '$321.71', ''], ['Other taxes', '$337.10', ''], ['Total taxes', '', '?'], ['Pay after taxes', '', '?']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef solution(table_data):\n    column_name = 'Total taxes'\n    column_1 = get_column_by_name(table_data, 'Federal income tax')\n    column_2 = get_column_by_name(table_data, 'State income tax')\n    column_3 = get_column_by_name(table_data, 'Other taxes')\n    total_taxes = sum_column(column_1) + sum_column(column_2) + sum_column(column_3)\n    return total_taxes\n\nprint(solution(table_data))"
  },
  {
    "id": "868",
    "question": "A reporter looked through her notebook to remember how many people she had interviewed in the past 6 days. What is the range of the numbers?",
    "answer": "12",
    "table_formatter_output": "table_data = [['Day', 'Number of people'], ['Thursday', 7], ['Friday', 16], ['Saturday', 19], ['Sunday', 15], ['Monday', 16], ['Tuesday', 7]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of people'\n    column = get_column_by_name(table_data, column_name)\n    answer = find_range(column)\n    return answer\nprint(solution(table_data)) # Output: 12"
  },
  {
    "id": "870",
    "question": "A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Sunday and Monday?",
    "answer": "4",
    "table_formatter_output": "table_data = [['Day', 'Leftover loaves'], ['Sunday', 23], ['Monday', 27], ['Tuesday', 7], ['Wednesday', 19], ['Thursday', 43]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table, day1, day2):\n    column_name = 'Leftover loaves'\n    column_1 = get_column_by_name(table, column_name)\n    index_1 = get_row_index_by_value(table, day1)\n    index_2 = get_row_index_by_value(table, day2)\n    value1 = get_column_cell_value(index_1, column_1)\n    value2 = get_column_cell_value(index_2, column_1)\n    change_in_value = value2 - value1\n    change_in_time = 1  # Assuming 1 day difference between the two days\n    rate_of_change = change_in_value / change_in_time\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, 'Sunday', 'Monday')\n    return rate_of_change"
  },
  {
    "id": "871",
    "question": "The city library monitored the number of books checked out each day. On which day were the fewest books checked out?",
    "answer": "Thursday",
    "table_formatter_output": "table_data = [['Day', 'Number of books'], ['Thursday', 735], ['Friday', 773], ['Saturday', 757], ['Sunday', 753]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_min_index(column, with_header=True):\n    column = column[1:] if with_header else column\n    min_value = min(column)\n    return column.index(min_value) + 1 if with_header else column.index(min_value)\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of books'\n    column_1 = get_column_by_name(table_data, column_name)\n    min_index = find_min_index(column_1)\n    column_2 = get_column_by_name(table_data, 'Day')\n    answer = get_column_cell_value(min_index, column_2)\n    return answer"
  },
  {
    "id": "891",
    "question": "Kimi records the number of pairs of sandals owned by each of her classmates. How many students are there in all?",
    "answer": "41",
    "table_formatter_output": "table_data = [['Number of pairs of sandals', 'Frequency'], [0, 1], [1, 19], [2, 18], [3, 3]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    total_students = sum_column(column_1)\n    return total_students\nprint(solution(table_data)) # Output: 41"
  },
  {
    "id": "893",
    "question": "For Earth Day, Fairfax High's environmental club tracked the number of seeds planted by its members. How many members planted fewer than 3 seeds?",
    "answer": "19",
    "table_formatter_output": "table_data = [['Seeds planted', 'Frequency'], [0, 2], [1, 3], [2, 14], [3, 13], [4, 5], [5, 19], [6, 11]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_rows(table, row_values, column_name):\n    column = get_column_by_name(table, column_name)\n    total = 0\n    for value in row_values:\n        index = table.index([value, column[0]])\n        total += column[index]\n    return total\n\ndef solution(table_data):\n    row_values = [0, 1, 2]\n    column_name = 'Frequency'\n    answer = sum_rows(table_data, row_values, column_name)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "894",
    "question": "Ethan went on a road trip and tracked his driving each day. What is the range of the numbers?",
    "answer": "22",
    "table_formatter_output": "table_data = [['Day', 'Number of miles'], ['Saturday', 73], ['Sunday', 76], ['Monday', 90], ['Tuesday', 95], ['Wednesday', 95], ['Thursday', 73]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of miles'\n    column = get_column_by_name(table_data, column_name)\n    answer = find_range(column)\n    return answer\nprint(solution(table_data)) # Output: 22"
  },
  {
    "id": "900",
    "question": "At Winchester Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2007 and 2008?",
    "answer": "-7",
    "table_formatter_output": "table_data = [['Year', 'Employees'], [2006, 19], [2007, 20], [2008, 13], [2009, 17], [2010, 12]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef calculate_rate_of_change(table_data, year1, year2):\n    column_name = 'Employees'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, year1)\n    index_2 = get_row_index_by_value(table_data, year2)\n    value1 = get_column_cell_value(index_1, column_1)\n    value2 = get_column_cell_value(index_2, column_1)\n    rate_of_change = (value2 - value1) / (year2 - year1)\n    return rate_of_change\n\ndef solution(table_data):\n    rate_of_change = calculate_rate_of_change(table_data, 2007, 2008)\n    return rate_of_change\n\nprint(solution(table_data))"
  },
  {
    "id": "904",
    "question": "Look at the table. Then answer the question. At a price of $1,035, is there a shortage or a surplus?",
    "answer": "surplus",
    "table_formatter_output": "table_data = [['Price', 'Quantity demanded', 'Quantity supplied'], ['$715', 19700, 14900], ['$795', 15200, 16700], ['$875', 10700, 18500], ['$955', 6200, 20300], ['$1,035', 1700, 22100]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    price_column = get_column_by_name(table_data, 'Price')\n    index = get_row_index_by_value(table_data, '$1,035')\n    quantity_demanded = get_column_cell_value(index, get_column_by_name(table_data, 'Quantity demanded'))\n    quantity_supplied = get_column_cell_value(index, get_column_by_name(table_data, 'Quantity supplied'))\n    \n    if quantity_demanded < quantity_supplied:\n        return 'surplus'\n    else:\n        return 'shortage'"
  },
  {
    "id": "909",
    "question": "Christine's classmates revealed how many science articles they read. What is the range of the numbers?",
    "answer": "6",
    "table_formatter_output": "table_data = [['Name', 'Number of science articles'], ['Christine', 75], ['Debbie', 70], ['Richard', 76], ['Hassan', 76], ['Perry', 71]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_range(column):\n    max_value = max(column[1:])\n    min_value = min(column[1:])\n    return max_value - min_value\n\ndef solution(table_data):\n    column_name = 'Number of science articles'\n    column = get_column_by_name(table_data, column_name)\n    answer = find_range(column)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "911",
    "question": "Kevin has $134.98. How much money will Kevin have left if he buys a jersey signed by a famous hockey player and a book signed by a famous author?",
    "answer": "19.49",
    "table_formatter_output": "table_data = [['book signed by a famous author', 18.60], ['jersey signed by a famous hockey player', 96.89], ['photograph signed by a famous movie star', 87.14], ['ball signed by a famous football player', 56.42]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(values):\n    return sum(values)\n\ndef subtract(a, b):\n    return a - b\n\ndef solution(table_data):\n    item_1 = 'book signed by a famous author'\n    item_2 = 'jersey signed by a famous hockey player'\n    \n    column_1 = get_column_by_name(table_data, item_1)\n    index_1 = table_data.index([item_1, get_column_cell_value(table_data.index([item_1, 0]), column_1)])\n    \n    column_2 = get_column_by_name(table_data, item_2)\n    index_2 = table_data.index([item_2, get_column_cell_value(table_data.index([item_2, 0]), column_2)])\n    \n    total_cost = sum_values([get_column_cell_value(index_1, column_1), get_column_cell_value(index_2, column_2)])\n    \n    starting_amount = 134.98\n    remaining_amount = subtract(starting_amount, total_cost)\n    \n    return round(remaining_amount, 2)"
  },
  {
    "id": "914",
    "question": "Look at the following schedule. When does Mr. Dyer's class begin?",
    "answer": "1:55 P.M.",
    "table_formatter_output": "table_data = [['Class', 'Begin', 'End'], [\"Ms. Clark's class\", '7:55 A.M.', '8:30 A.M.'], [\"Mr. Watson's class\", '8:35 A.M.', '9:40 A.M.'], [\"Ms. Cooper's class\", '10:00 A.M.', '10:25 A.M.'], [\"Mr. Dotson's class\", '10:35 A.M.', '11:25 A.M.'], [\"Mr. O'Connor's class\", '11:45 A.M.', '12:35 P.M.'], [\"Ms. Pena's class\", '12:55 P.M.', '1:50 P.M.'], [\"Mr. Dyer's class\", '1:55 P.M.', '2:50 P.M.'], [\"Mr. Arnold's class\", '3:05 P.M.', '3:40 P.M.'], [\"Mrs. Powell's class\", '3:45 P.M.', '4:10 P.M.']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Begin'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = get_row_index_by_value(table_data, \"Mr. Dyer's class\")\n    answer = get_column_cell_value(index_1, column_1)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "915",
    "question": "Look at the following schedule. Which event begins at 1.35 P.M.?",
    "answer": "golf tournament",
    "table_formatter_output": "table_data = [['Event', 'Begin', 'End'], ['track meet', '11:55 A.M.', '1:45 P.M.'], ['golf tournament', '1:35 P.M.', '2:55 P.M.'], ['gymnastics meet', '2:55 P.M.', '5:45 P.M.'], [\"men's tennis match\", '4:55 P.M.', '7:35 P.M.'], [\"women's tennis match\", '7:10 P.M.', '8:30 P.M.']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_1 = get_column_by_name(table_data, 'Begin')\n    index_1 = get_row_index_by_value(column_1, '1:35 P.M.')\n    event_column = get_column_by_name(table_data, 'Event')\n    answer = get_column_cell_value(index_1, event_column)\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "919",
    "question": "To determine whether people make fewer trips to the movies when the economy is bad, a reporter asked people how many movies they saw last month. How many people went to the movies more than 3 times?",
    "answer": "16",
    "table_formatter_output": "table_data = [['Number of trips', 'Frequency'], [0, 19], [1, 3], [2, 16], [3, 20], [4, 12], [5, 4]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_frequencies_greater_than_n(table, n):\n    column_1 = get_column_by_name(table, 'Number of trips')\n    column_2 = get_column_by_name(table, 'Frequency')\n    total = 0\n    for i in range(len(column_1)):\n        if column_1[i] > n:\n            total += column_2[i]\n    return total\n\ndef solution(table_data):\n    answer = sum_frequencies_greater_than_n(table_data, 3)\n    return answer\nprint(solution(table_data)) # Output: 16"
  },
  {
    "id": "922",
    "question": "Some friends played miniature golf and wrote down their scores. What is the mode of the numbers?",
    "answer": "65",
    "table_formatter_output": "table_data = [['Name', 'Score'], ['Aisha', 66], ['Lucy', 63], ['Emma', 63], ['Ted', 65], ['Owen', 65], ['Greta', 65], ['Bert', 66]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Score'\n    column_1 = get_column_by_name(table_data, column_name)\n    mode = find_mode(column_1)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "926",
    "question": "A farmer counted the number of apples on each tree in her orchard. How many trees have fewer than 60 apples?",
    "answer": "7",
    "table_formatter_output": "table_data = [['Stem', 'Leaf'], [4, [0, 3, 4, 5, 9]], [5, [7, 8]], [6, [3, 3, 3, 4, 7, 7]], [7, [0, 2, 3, 8]], [8, [0, 0, 3]]]",
    "tool_maker_output": "def get_leaves_count(table):\n    count = 0\n    for row in table[1:]:\n        leaves = row[1]\n        for leaf in leaves:\n            count += leaf\n    return count\n\ndef solution(table_data):\n    total_leaves = get_leaves_count(table_data)\n    return total_leaves\n\nsolution(table_data) # Output: 7"
  },
  {
    "id": "931",
    "question": "How much more does a ticket for a South American cruise cost than a ticket for a Mexican cruise?",
    "answer": "231",
    "table_formatter_output": "table_data = [['ticket for a Hawaiian cruise', 8295], ['ticket for an Alaskan cruise', 4613], ['ticket for a South American cruise', 5926], ['ticket for an Atlantic cruise', 1497], ['ticket for an Australian cruise', 2297], ['ticket for a Mexican cruise', 5695]]",
    "tool_maker_output": "def get_row_by_value(table, value):\n    for row in table:\n        if value in row:\n            return row\n\ndef get_ticket_price(table, ticket_name):\n    row = get_row_by_value(table, ticket_name)\n    return row[1]\n\ndef calculate_price_difference(table, ticket1, ticket2):\n    price1 = get_ticket_price(table, ticket1)\n    price2 = get_ticket_price(table, ticket2)\n    return price1 - price2\n\ndef solution(table_data):\n    ticket1 = 'ticket for a South American cruise'\n    ticket2 = 'ticket for a Mexican cruise'\n    price_difference = calculate_price_difference(table_data, ticket1, ticket2)\n    return price_difference"
  },
  {
    "id": "940",
    "question": "How much money does Annie need to buy a bottle of sunscreen, a package of dental floss, and a toothbrush?",
    "answer": "11.43",
    "table_formatter_output": "table_data = [['bottle of sunscreen', 7.77], ['tube of toothpaste', 1.41], ['package of dental floss', 1.55], ['toothbrush', 2.11]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef sum_values(values):\n    return sum(values)\n\ndef solution(table_data):\n    items = ['bottle of sunscreen', 'package of dental floss', 'toothbrush']\n    column_1 = get_column_by_name(table_data, 'bottle of sunscreen')\n    column_2 = get_column_by_name(table_data, 'package of dental floss')\n    column_3 = get_column_by_name(table_data, 'toothbrush')\n    \n    index_1 = table_data[0].index('bottle of sunscreen')\n    index_2 = table_data[0].index('package of dental floss')\n    index_3 = table_data[0].index('toothbrush')\n    \n    total_cost = sum_values([get_column_cell_value(index_1, column_1), get_column_cell_value(index_2, column_2), get_column_cell_value(index_3, column_3)])\n    \n    return total_cost\nprint(solution(table_data)) # Output: 11.43"
  },
  {
    "id": "942",
    "question": "Some students compared how many clubs they belong to. What is the mode of the numbers?",
    "answer": "3",
    "table_formatter_output": "table_data = [['Name', 'Number of clubs'], ['Travis', 6], ['Abby', 3], ['Patrick', 5], ['Max', 3], ['Winston', 3], ['Kathleen', 5], ['Grayson', 3], ['Sophia', 5]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef find_mode(column):\n    frequency = {}\n    for item in column[1:]:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    mode = max(frequency, key=frequency.get)\n    return mode\n\ndef solution(table_data):\n    column_name = 'Number of clubs'\n    column_1 = get_column_by_name(table_data, column_name)\n    mode = find_mode(column_1)\n    return mode\n\nprint(solution(table_data))"
  },
  {
    "id": "944",
    "question": "Mitch keeps a jar of coins on his bookshelf. The frequency chart shows the coins currently in the jar. Mitch finds 12 more coins in his wallet. How many coins does Mitch have in all?",
    "answer": "311",
    "table_formatter_output": "table_data = [['Type', 'Frequency'], ['quarter', 31], ['dime', 78], ['nickel', 46], ['penny', 144]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef sum_column(column, with_header=True):\n    column = column[1:] if with_header else column\n    return sum(column)\n\ndef solution(table_data):\n    column_name = 'Frequency'\n    column_1 = get_column_by_name(table_data, column_name)\n    total_coins_in_jar = sum_column(column_1)\n    coins_in_wallet = 12\n    total_coins = total_coins_in_jar + coins_in_wallet\n    return total_coins\n\nprint(solution(table_data))"
  },
  {
    "id": "946",
    "question": "Anne went to the store. She bought 1.7 kilograms of pesto sauce. How much did she spend?",
    "answer": "3.40",
    "table_formatter_output": "table_data = [['pesto sauce', '$2 per kg'], ['chicken sauce', '$3 per kg'], ['beef sauce', '$3 per kg'], ['alfredo sauce', '$2 per kg']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_price_per_kg(table, item):\n    for row in table:\n        if row[0] == item:\n            price = float(row[1].strip('$').split()[0])\n            return price\n\ndef calculate_total_cost(item, weight, table_data):\n    price_per_kg = get_price_per_kg(table_data, item)\n    total_cost = price_per_kg * weight\n    return total_cost\n\ndef solution(table_data):\n    item = 'pesto sauce'\n    weight = 1.7\n    total_cost = calculate_total_cost(item, weight, table_data)\n    return total_cost"
  },
  {
    "id": "947",
    "question": "An economist tracked the amount of per-capita aid sent from the U.S. to various countries during the 1900s. In 1975, which country received more aid per capita, Libya or Sri Lanka?",
    "answer": "Sri Lanka",
    "table_formatter_output": "table_data = [['Country', '1965', '1975'], ['Libya', '$4', '$2'], ['Afghanistan', '$5', '$5'], ['Pakistan', '$9', '$9'], ['Sri Lanka', '$1', '$11']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_row_index_by_value(table, row_value):\n    for i in range(len(table)):\n        if table[i][0] == row_value:\n            return i\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = '1975'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_libya = get_row_index_by_value(table_data, 'Libya')\n    index_sri_lanka = get_row_index_by_value(table_data, 'Sri Lanka')\n    aid_libya = get_column_cell_value(index_libya, column_1)\n    aid_sri_lanka = get_column_cell_value(index_sri_lanka, column_1)\n    answer = 'Sri Lanka' if aid_sri_lanka > aid_libya else 'Libya'\n    return answer\n\nprint(solution(table_data))"
  },
  {
    "id": "953",
    "question": "How much money does Natalie need to buy 2 online ads?",
    "answer": "5,900",
    "table_formatter_output": "table_data = [['online ad', '$2,950'], ['billboard ad', '$5,822'], ['TV ad', '$6,757'], ['magazine ad', '$8,747']]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef multiply(value1, value2):\n    return value1 * value2\n\ndef solution(table_data):\n    column_name = '$'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = table_data[0].index('online ad')\n    price_per_ad = int(column_1[index_1].replace('$', '').replace(',', ''))\n    quantity = 2\n    total_cost = multiply(price_per_ad, quantity)\n    return total_cost"
  },
  {
    "id": "954",
    "question": "Each stack has 5 magazines. How many magazines are in 5 stacks?",
    "answer": "25",
    "table_formatter_output": "table_data = [['Number of stacks', 'Number of magazines'], [1, 5], [2, 10], [3, 15], [4, 20], [5, 25]]",
    "tool_maker_output": "def get_column_by_name(table, column_name):\n    column_index = table[0].index(column_name)\n    column = []\n    for row in table:\n        column.append(row[column_index])\n    return column\n\ndef get_column_cell_value(row_index, column):\n    return column[row_index]\n\ndef solution(table_data):\n    column_name = 'Number of magazines'\n    column_1 = get_column_by_name(table_data, column_name)\n    index_1 = table_data[-1][0]\n    answer = get_column_cell_value(index_1, column_1)\n    return answer\n\nsolution(table_data) # Output: 25"
  }
]